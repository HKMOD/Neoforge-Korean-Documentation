"use strict";(self.webpackChunkneoforged_docs=self.webpackChunkneoforged_docs||[]).push([[5892],{2664:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>l});var o=t(5893),i=t(1151);const s={},r="Networking",a={id:"networking/index",title:"Networking",description:"Communication between servers and clients is the backbone of a successful mod implementation.",source:"@site/versioned_docs/version-1.20.4/networking/index.md",sourceDirName:"networking",slug:"/networking/",permalink:"/Neoforge-Korean-Documentation/docs/1.20.4/networking/",draft:!1,unlisted:!1,tags:[],version:"1.20.4",frontMatter:{},sidebar:"mainSidebar",previous:{title:"NeoForge Update Checker",permalink:"/Neoforge-Korean-Documentation/docs/1.20.4/misc/updatechecker"},next:{title:"Using Configuration Tasks",permalink:"/Neoforge-Korean-Documentation/docs/1.20.4/networking/configuration-tasks"}},c={},l=[];function d(e){const n={a:"a",code:"code",h1:"h1",li:"li",ol:"ol",p:"p",ul:"ul",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"networking",children:"Networking"}),"\n",(0,o.jsx)(n.p,{children:"Communication between servers and clients is the backbone of a successful mod implementation."}),"\n",(0,o.jsx)(n.p,{children:"There are two primary goals in network communication:"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsxs)(n.li,{children:['Making sure the client view is "in sync" with the server view',"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"The flower at coordinates (X, Y, Z) just grew"}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["Giving the client a way to tell the server that something has changed about the player","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"the player pressed a key"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"The most common way to accomplish these goals is to pass messages between the client and the server. These messages will usually be structured, containing data in a particular arrangement, for easy sending and receiving."}),"\n",(0,o.jsxs)(n.p,{children:["There is a technique provided by NeoForge to facilitate communication mostly built on top of ",(0,o.jsx)(n.a,{href:"https://netty.io",title:"Netty Website",children:"netty"}),".\nThis technique can be used by listening for the ",(0,o.jsx)(n.code,{children:"RegisterPayloadHandlerEvent"})," event, and then registering a specific type of ",(0,o.jsx)(n.a,{href:"/Neoforge-Korean-Documentation/docs/1.20.4/networking/payload",title:"Registering custom Payloads",children:"payloads"}),", its reader, and its handler function to the registrar."]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>r});var o=t(7294);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);