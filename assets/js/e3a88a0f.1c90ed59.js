"use strict";(self.webpackChunkneoforged_docs=self.webpackChunkneoforged_docs||[]).push([[5216],{2349:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"1.20.4","label":"1.20.4","banner":"unmaintained","badge":true,"noIndex":false,"className":"docs-version-1.20.4","isLast":false,"docsSidebars":{"mainSidebar":[{"type":"category","label":"Getting Started with Neo","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Mod Files","href":"/Neoforge-Korean-Documentation/docs/1.20.4/gettingstarted/modfiles","docId":"gettingstarted/modfiles","unlisted":false},{"type":"link","label":"Structuring Your Mod","href":"/Neoforge-Korean-Documentation/docs/1.20.4/gettingstarted/structuring","docId":"gettingstarted/structuring","unlisted":false},{"type":"link","label":"Versioning","href":"/Neoforge-Korean-Documentation/docs/1.20.4/gettingstarted/versioning","docId":"gettingstarted/versioning","unlisted":false}],"href":"/Neoforge-Korean-Documentation/docs/1.20.4/gettingstarted/"},{"type":"category","label":"Advanced Topics","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Access Transformer","href":"/Neoforge-Korean-Documentation/docs/1.20.4/advanced/accesstransformers","docId":"advanced/accesstransformers","unlisted":false}]},{"type":"category","label":"Block Entities","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"BlockEntityRenderer","href":"/Neoforge-Korean-Documentation/docs/1.20.4/blockentities/ber","docId":"blockentities/ber","unlisted":false}],"href":"/Neoforge-Korean-Documentation/docs/1.20.4/blockentities/"},{"type":"category","label":"Blocks","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Blockstates","href":"/Neoforge-Korean-Documentation/docs/1.20.4/blocks/states","docId":"blocks/states","unlisted":false}],"href":"/Neoforge-Korean-Documentation/docs/1.20.4/blocks/"},{"type":"category","label":"Concepts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Events","href":"/Neoforge-Korean-Documentation/docs/1.20.4/concepts/events","docId":"concepts/events","unlisted":false},{"type":"link","label":"Registries","href":"/Neoforge-Korean-Documentation/docs/1.20.4/concepts/registries","docId":"concepts/registries","unlisted":false},{"type":"link","label":"Sides","href":"/Neoforge-Korean-Documentation/docs/1.20.4/concepts/sides","docId":"concepts/sides","unlisted":false}]},{"type":"category","label":"Datagen","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Advancement Generation","href":"/Neoforge-Korean-Documentation/docs/1.20.4/datagen/advancements","docId":"datagen/advancements","unlisted":false},{"type":"link","label":"Global Loot Modifier Generation","href":"/Neoforge-Korean-Documentation/docs/1.20.4/datagen/glm","docId":"datagen/glm","unlisted":false},{"type":"link","label":"Loot Table Generation","href":"/Neoforge-Korean-Documentation/docs/1.20.4/datagen/loottables","docId":"datagen/loottables","unlisted":false},{"type":"link","label":"Recipe Generation","href":"/Neoforge-Korean-Documentation/docs/1.20.4/datagen/recipes","docId":"datagen/recipes","unlisted":false},{"type":"link","label":"Tag Generation","href":"/Neoforge-Korean-Documentation/docs/1.20.4/datagen/tags","docId":"datagen/tags","unlisted":false}]},{"type":"category","label":"Data Maps","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Built-in Data Maps","href":"/Neoforge-Korean-Documentation/docs/1.20.4/datamaps/neo_maps","docId":"datamaps/neo_maps","unlisted":false},{"type":"link","label":"JSON Structure","href":"/Neoforge-Korean-Documentation/docs/1.20.4/datamaps/structure","docId":"datamaps/structure","unlisted":false}],"href":"/Neoforge-Korean-Documentation/docs/1.20.4/datamaps/"},{"type":"category","label":"Data Storage","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Data Attachments","href":"/Neoforge-Korean-Documentation/docs/1.20.4/datastorage/attachments","docId":"datastorage/attachments","unlisted":false},{"type":"link","label":"Capabilities","href":"/Neoforge-Korean-Documentation/docs/1.20.4/datastorage/capabilities","docId":"datastorage/capabilities","unlisted":false},{"type":"link","label":"Codecs","href":"/Neoforge-Korean-Documentation/docs/1.20.4/datastorage/codecs","docId":"datastorage/codecs","unlisted":false},{"type":"link","label":"Named Binary Tag (NBT)","href":"/Neoforge-Korean-Documentation/docs/1.20.4/datastorage/nbt","docId":"datastorage/nbt","unlisted":false},{"type":"link","label":"Saved Data","href":"/Neoforge-Korean-Documentation/docs/1.20.4/datastorage/saveddata","docId":"datastorage/saveddata","unlisted":false}]},{"type":"category","label":"GUIs","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Menus","href":"/Neoforge-Korean-Documentation/docs/1.20.4/gui/menus","docId":"gui/menus","unlisted":false},{"type":"link","label":"Screens","href":"/Neoforge-Korean-Documentation/docs/1.20.4/gui/screens","docId":"gui/screens","unlisted":false}]},{"type":"category","label":"Items","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"BlockEntityWithoutLevelRenderer","href":"/Neoforge-Korean-Documentation/docs/1.20.4/items/bewlr","docId":"items/bewlr","unlisted":false},{"type":"link","label":"The Interaction Pipeline","href":"/Neoforge-Korean-Documentation/docs/1.20.4/items/interactionpipeline","docId":"items/interactionpipeline","unlisted":false},{"type":"link","label":"Mob Effects & Potions","href":"/Neoforge-Korean-Documentation/docs/1.20.4/items/mobeffects","docId":"items/mobeffects","unlisted":false},{"type":"link","label":"Tools & Armor","href":"/Neoforge-Korean-Documentation/docs/1.20.4/items/tools","docId":"items/tools","unlisted":false}],"href":"/Neoforge-Korean-Documentation/docs/1.20.4/items/"},{"type":"category","label":"Legacy","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Porting to Minecraft 1.20","href":"/Neoforge-Korean-Documentation/docs/1.20.4/legacy/porting","docId":"legacy/porting","unlisted":false}]},{"type":"category","label":"Miscellaneous","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Configuration","href":"/Neoforge-Korean-Documentation/docs/1.20.4/misc/config","docId":"misc/config","unlisted":false},{"type":"link","label":"Debug Profiler","href":"/Neoforge-Korean-Documentation/docs/1.20.4/misc/debugprofiler","docId":"misc/debugprofiler","unlisted":false},{"type":"link","label":"Game Tests","href":"/Neoforge-Korean-Documentation/docs/1.20.4/misc/gametest","docId":"misc/gametest","unlisted":false},{"type":"link","label":"Key Mappings","href":"/Neoforge-Korean-Documentation/docs/1.20.4/misc/keymappings","docId":"misc/keymappings","unlisted":false},{"type":"link","label":"Resource Locations","href":"/Neoforge-Korean-Documentation/docs/1.20.4/misc/resourcelocation","docId":"misc/resourcelocation","unlisted":false},{"type":"link","label":"NeoForge Update Checker","href":"/Neoforge-Korean-Documentation/docs/1.20.4/misc/updatechecker","docId":"misc/updatechecker","unlisted":false}]},{"type":"category","label":"Networking","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Using Configuration Tasks","href":"/Neoforge-Korean-Documentation/docs/1.20.4/networking/configuration-tasks","docId":"networking/configuration-tasks","unlisted":false},{"type":"link","label":"Entities","href":"/Neoforge-Korean-Documentation/docs/1.20.4/networking/entities","docId":"networking/entities","unlisted":false},{"type":"link","label":"Registering Payloads","href":"/Neoforge-Korean-Documentation/docs/1.20.4/networking/payload","docId":"networking/payload","unlisted":false}],"href":"/Neoforge-Korean-Documentation/docs/1.20.4/networking/"},{"type":"category","label":"Resources","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"Client","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"I18n and L10n","href":"/Neoforge-Korean-Documentation/docs/1.20.4/resources/client/i18n","docId":"resources/client/i18n","unlisted":false},{"type":"category","label":"Models","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Baked Models","href":"/Neoforge-Korean-Documentation/docs/1.20.4/resources/client/models/bakedmodel","docId":"resources/client/models/bakedmodel","unlisted":false},{"type":"link","label":"Model Datagen","href":"/Neoforge-Korean-Documentation/docs/1.20.4/resources/client/models/datagen","docId":"resources/client/models/datagen","unlisted":false},{"type":"link","label":"Custom Model Loaders","href":"/Neoforge-Korean-Documentation/docs/1.20.4/resources/client/models/modelloaders","docId":"resources/client/models/modelloaders","unlisted":false}],"href":"/Neoforge-Korean-Documentation/docs/1.20.4/resources/client/models/"},{"type":"link","label":"Particles","href":"/Neoforge-Korean-Documentation/docs/1.20.4/resources/client/particles","docId":"resources/client/particles","unlisted":false},{"type":"link","label":"Sounds","href":"/Neoforge-Korean-Documentation/docs/1.20.4/resources/client/sounds","docId":"resources/client/sounds","unlisted":false},{"type":"link","label":"Textures","href":"/Neoforge-Korean-Documentation/docs/1.20.4/resources/client/textures","docId":"resources/client/textures","unlisted":false}]},{"type":"category","label":"Datapacks","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Advancements","href":"/Neoforge-Korean-Documentation/docs/1.20.4/resources/server/advancements","docId":"resources/server/advancements","unlisted":false},{"type":"link","label":"Conditionally-Loaded Data","href":"/Neoforge-Korean-Documentation/docs/1.20.4/resources/server/conditional","docId":"resources/server/conditional","unlisted":false},{"type":"link","label":"Global Loot Modifiers","href":"/Neoforge-Korean-Documentation/docs/1.20.4/resources/server/glm","docId":"resources/server/glm","unlisted":false},{"type":"link","label":"Loot Tables","href":"/Neoforge-Korean-Documentation/docs/1.20.4/resources/server/loottables","docId":"resources/server/loottables","unlisted":false},{"type":"category","label":"Recipes","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Custom Recipes","href":"/Neoforge-Korean-Documentation/docs/1.20.4/resources/server/recipes/custom","docId":"resources/server/recipes/custom","unlisted":false},{"type":"link","label":"Non-Datapack Recipes","href":"/Neoforge-Korean-Documentation/docs/1.20.4/resources/server/recipes/incode","docId":"resources/server/recipes/incode","unlisted":false},{"type":"link","label":"Ingredients","href":"/Neoforge-Korean-Documentation/docs/1.20.4/resources/server/recipes/ingredients","docId":"resources/server/recipes/ingredients","unlisted":false}],"href":"/Neoforge-Korean-Documentation/docs/1.20.4/resources/server/recipes/"},{"type":"link","label":"Tags","href":"/Neoforge-Korean-Documentation/docs/1.20.4/resources/server/tags","docId":"resources/server/tags","unlisted":false}],"href":"/Neoforge-Korean-Documentation/docs/1.20.4/resources/server/"}],"href":"/Neoforge-Korean-Documentation/docs/1.20.4/resources/"}]},"docs":{"advanced/accesstransformers":{"id":"advanced/accesstransformers","title":"Access Transformer","description":"Access Transformer(\uc904\uc5ec\uc11c AT)\ub294 \ud074\ub798\uc2a4, \uba54\uc11c\ub4dc, \ud544\ub4dc\uc758 \uac00\uc2dc\uc131 \ubc0f \ubd88\ubcc0 \uc5ec\ubd80\ub97c \ubcc0\uacbd\ud558\ub294 \uc2dc\uc2a4\ud15c \uc785\ub2c8\ub2e4. \ubaa8\ub4dc\uac00 \uc811\uadfc \ubd88\uac00\ub2a5\ud55c \uba64\ubc84\ub97c \uc0ac\uc6a9 \ubc0f \uc218\uc815\ud560 \uc218 \uc788\ub3c4\ub85d \ud574 \uc90d\ub2c8\ub2e4.","sidebar":"mainSidebar"},"blockentities/ber":{"id":"blockentities/ber","title":"BlockEntityRenderer","description":"A BlockEntityRenderer or BER is used to render blocks in a way that cannot be represented with a static baked model (JSON, OBJ, B3D, others). A block entity renderer requires the block to have a BlockEntity.","sidebar":"mainSidebar"},"blockentities/index":{"id":"blockentities/index","title":"Block Entities","description":"BlockEntities are like simplified Entities that are bound to a Block.","sidebar":"mainSidebar"},"blocks/index":{"id":"blocks/index","title":"Blocks","description":"Blocks are essential to the Minecraft world. They make up all the terrain, structures, and machines. Chances are if you are interested in making a mod, then you will want to add some blocks. This page will guide you through the creation of blocks, and some of the things you can do with them.","sidebar":"mainSidebar"},"blocks/states":{"id":"blocks/states","title":"Blockstates","description":"Often, you will find yourself in a situation where you want different states of a block. For example, a wheat crop has eight growth stages, and making a separate block for each stage feels wrong. Or you have a slab or slab-like block - one bottom state, one top state, and one state that has both.","sidebar":"mainSidebar"},"concepts/events":{"id":"concepts/events","title":"Events","description":"One of NeoForge\'s main features is the event system. Events are fired for various things that happen in the game. For example, there are events for when the player right clicks, when a player or another entity jumps, when blocks are rendered, when the game is loaded, etc. A modder can subscribe event handlers to each of these events, and then perform their desired behavior inside these event handlers.","sidebar":"mainSidebar"},"concepts/registries":{"id":"concepts/registries","title":"Registries","description":"Registration is the process of taking the objects of a mod (such as items, blocks, entities, etc.) and making them known to the game. Registering things is important, as without registration the game will simply not know about these objects, which will cause unexplainable behaviors and crashes.","sidebar":"mainSidebar"},"concepts/sides":{"id":"concepts/sides","title":"Sides","description":"Like many other programs, Minecraft follows a client-server concept, where the client is responsible for displaying the data, while the server is responsible for updating them. When using these terms, we have a fairly intuitive understanding of what we mean... right?","sidebar":"mainSidebar"},"datagen/advancements":{"id":"datagen/advancements","title":"Advancement Generation","description":"Advancements] can be generated for a mod by constructing a new AdvancementProvider and providing AdvancementSubProviders. Advancements can either be created and supplied manually or, for convenience, created using Advancement.Builder. The provider must be [added to the DataGenerator.","sidebar":"mainSidebar"},"datagen/glm":{"id":"datagen/glm","title":"Global Loot Modifier Generation","description":"Global Loot Modifiers (GLMs) can be generated for a mod by subclassing GlobalLootModifierProvider and implementing #start. Each GLM can be added generated by calling #add and specifying the name of the modifier and the modifier instance to be serialized. After implementation, the provider must be added to the DataGenerator.","sidebar":"mainSidebar"},"datagen/loottables":{"id":"datagen/loottables","title":"Loot Table Generation","description":"Loot tables can be generated for a mod by constructing a new LootTableProvider and providing LootTableProvider.SubProviderEntrys. The provider must be added to the DataGenerator.","sidebar":"mainSidebar"},"datagen/recipes":{"id":"datagen/recipes","title":"Recipe Generation","description":"Recipes can be generated for a mod by subclassing RecipeProvider and implementing #buildRecipes. A recipe is supplied for data generation once a FinishedRecipe view is accepted by the consumer. FinishedRecipes can either be created and supplied manually or, for convenience, created using a RecipeBuilder.","sidebar":"mainSidebar"},"datagen/tags":{"id":"datagen/tags","title":"Tag Generation","description":"Tags] can be generated for a mod by subclassing TagsProvider and implementing #addTags. After implementation, the provider must be [added to the DataGenerator.","sidebar":"mainSidebar"},"datamaps/index":{"id":"datamaps/index","title":"Data Maps","description":"A registry data map contains data-driven, reloadable objects that can be attached to a registry object.","sidebar":"mainSidebar"},"datamaps/neo_maps":{"id":"datamaps/neo_maps","title":"Built-in Data Maps","description":"NeoForge provides a few data maps that mostly replace hardcoded in-code vanilla maps.","sidebar":"mainSidebar"},"datamaps/structure":{"id":"datamaps/structure","title":"JSON Structure","description":"For the purposes of this page, we will use a data map which is an object with two float keys: amount and chance as an example. The codec for that object can be found here.","sidebar":"mainSidebar"},"datastorage/attachments":{"id":"datastorage/attachments","title":"Data Attachments","description":"The data attachment system allows mods to attach and store additional data on block entities, chunks, entities, and item stacks.","sidebar":"mainSidebar"},"datastorage/capabilities":{"id":"datastorage/capabilities","title":"Capabilities","description":"Capabilities allow exposing features in a dynamic and flexible way without having to resort to directly implementing many interfaces.","sidebar":"mainSidebar"},"datastorage/codecs":{"id":"datastorage/codecs","title":"Codecs","description":"Codecs are a serialization tool from Mojang\'s [DataFixerUpper] used to describe how objects can be transformed between different formats, such as JsonElements for JSON and Tags for NBT.","sidebar":"mainSidebar"},"datastorage/nbt":{"id":"datastorage/nbt","title":"Named Binary Tag (NBT)","description":"NBT is a format introduced in the earliest days of Minecraft, written by Notch himself. It is widely used throughout the Minecraft codebase for data storage.","sidebar":"mainSidebar"},"datastorage/saveddata":{"id":"datastorage/saveddata","title":"Saved Data","description":"The Saved Data (SD) system can be used to save additional data on levels.","sidebar":"mainSidebar"},"gettingstarted/index":{"id":"gettingstarted/index","title":"Getting Started with NeoForge","description":"This section includes information about how to set up a NeoForge workspace, and how to run and test your mod.","sidebar":"mainSidebar"},"gettingstarted/modfiles":{"id":"gettingstarted/modfiles","title":"Mod Files","description":"The mod files are responsible for determining what mods are packaged into your JAR, what information to display within the \'Mods\' menu, and how your mod should be loaded in the game.","sidebar":"mainSidebar"},"gettingstarted/structuring":{"id":"gettingstarted/structuring","title":"Structuring Your Mod","description":"Structured mods are beneficial for maintenance, making contributions, and providing a clearer understanding of the underlying codebase. Some of the recommendations from Java, Minecraft, and NeoForge are listed below.","sidebar":"mainSidebar"},"gettingstarted/versioning":{"id":"gettingstarted/versioning","title":"Versioning","description":"This article will break down how versioning works in Minecraft and NeoForge, and will give some recommendations for mod versioning as well.","sidebar":"mainSidebar"},"gui/menus":{"id":"gui/menus","title":"Menus","description":"Menus are one type of backend for Graphical User Interfaces, or GUIs; they handle the logic involved in interacting with some represented data holder. Menus themselves are not data holders. They are views which allow to user to indirectly modify the internal data holder state. As such, a data holder should not be directly coupled to any menu, instead passing in the data references to invoke and modify.","sidebar":"mainSidebar"},"gui/screens":{"id":"gui/screens","title":"Screens","description":"Screens are typically the base of all Graphical User Interfaces (GUIs) in Minecraft: taking in user input, verifying it on the server, and syncing the resulting action back to the client. They can be combined with [menus] to create an communication network for inventory-like views, or they can be standalone which modders can handle through their own [network] implementations.","sidebar":"mainSidebar"},"items/bewlr":{"id":"items/bewlr","title":"BlockEntityWithoutLevelRenderer","description":"BlockEntityWithoutLevelRenderer is a method to handle dynamic rendering on items. This system is much simpler than the old ItemStack system, which required a BlockEntity, and did not allow access to the ItemStack.","sidebar":"mainSidebar"},"items/index":{"id":"items/index","title":"Items","description":"Along with blocks, items are a key component of Minecraft. While blocks make up the world around you, items exist within inventories.","sidebar":"mainSidebar"},"items/interactionpipeline":{"id":"items/interactionpipeline","title":"The Interaction Pipeline","description":"This page aims to make the fairly complex and confusing process of things being right-clicked by the player more understandable, as well as clarifying what result to use where and why.","sidebar":"mainSidebar"},"items/mobeffects":{"id":"items/mobeffects","title":"Mob Effects & Potions","description":"Status effects, sometimes known as potion effects and referred to in-code as MobEffects, are effects that influence an entity every tick. This article explains how to use them, what the difference between an effect and a potion is, and how to add your own.","sidebar":"mainSidebar"},"items/tools":{"id":"items/tools","title":"Tools & Armor","description":"Tools are items whose primary use is to break blocks. Many mods add new tool sets (for example copper tools) or new tool types (for example hammers).","sidebar":"mainSidebar"},"legacy/porting":{"id":"legacy/porting","title":"Porting to Minecraft 1.20","description":"Here you can find a list of primers on how to port from old versions to the current version. Some versions are lumped together since that particular version never saw much usage.","sidebar":"mainSidebar"},"misc/config":{"id":"misc/config","title":"Configuration","description":"Configurations define settings and consumer preferences that can be applied to a mod instance. NeoForge uses a configuration system using TOML files and read with NightConfig.","sidebar":"mainSidebar"},"misc/debugprofiler":{"id":"misc/debugprofiler","title":"Debug Profiler","description":"Minecraft provides a Debug Profiler that provides system data, current game settings, JVM data, level data, and sided tick information to find time consuming code. Considering things like TickEvents and ticking BlockEntities, this can be very useful for modders and server owners that want to find a lag source.","sidebar":"mainSidebar"},"misc/gametest":{"id":"misc/gametest","title":"Game Tests","description":"Game Tests are a way to run in-game unit tests. The system was designed to be scalable and in parallel to run large numbers of different tests efficiently. Testing object interactions and behaviors are simply a few of the many applications of this framework.","sidebar":"mainSidebar"},"misc/keymappings":{"id":"misc/keymappings","title":"Key Mappings","description":"A key mapping, or key binding, defines a particular action that should be tied to an input: mouse click, key press, etc. Each action defined by a key mapping can be checked whenever the client can take an input. Furthermore, each key mapping can be assigned to any input through the Controls option menu.","sidebar":"mainSidebar"},"misc/resourcelocation":{"id":"misc/resourcelocation","title":"Resource Locations","description":"ResourceLocations are one of the most important things in Minecraft. They are used as keys in registries, as identifiers for data or resource files, as references to models in code, and in a lot of other places. A ResourceLocation consists of two parts.","sidebar":"mainSidebar"},"misc/updatechecker":{"id":"misc/updatechecker","title":"NeoForge Update Checker","description":"NeoForge provides a very lightweight, opt-in, update-checking framework. If any mods have an available update, it will show a flashing icon on the \'Mods\' button of the main menu and mod list along with the respective changelogs. It does not download updates automatically.","sidebar":"mainSidebar"},"networking/configuration-tasks":{"id":"networking/configuration-tasks","title":"Using Configuration Tasks","description":"The networking protocol for the client and server has a specific phase where the server can configure the client before the player actually joins the game.","sidebar":"mainSidebar"},"networking/entities":{"id":"networking/entities","title":"Entities","description":"In addition to regular network messages, there are various other systems provided to handle synchronizing entity data.","sidebar":"mainSidebar"},"networking/index":{"id":"networking/index","title":"Networking","description":"Communication between servers and clients is the backbone of a successful mod implementation.","sidebar":"mainSidebar"},"networking/payload":{"id":"networking/payload","title":"Registering Payloads","description":"Payloads are a way to send arbitrary data between the client and the server. They are registered using the IPayloadRegistrar that can be retrieved for a given namespace from the RegisterPayloadHandlerEvent event.","sidebar":"mainSidebar"},"resources/client/i18n":{"id":"resources/client/i18n","title":"I18n and L10n","description":"I18n (short for internationalization) is the way of designing a program to work with multiple languages. L10n (short for localization) is the process of translating text into the user\'s language. Minecraft implements these using Components.","sidebar":"mainSidebar"},"resources/client/models/bakedmodel":{"id":"resources/client/models/bakedmodel","title":"Baked Models","description":"BakedModels are the in-code representation of a shape with textures. They can originate from multiple sources, for example from a call to UnbakedModel#bake (default model loader) or IUnbakedGeometry#bake (custom model loaders). Some block entity renderers also make use of baked models. There is no limit to how complex a model may be.","sidebar":"mainSidebar"},"resources/client/models/datagen":{"id":"resources/client/models/datagen","title":"Model Datagen","description":"Like most JSON data, block and item models can be datagenned. Since some things are common between item and block models, so is some of the datagen code.","sidebar":"mainSidebar"},"resources/client/models/index":{"id":"resources/client/models/index","title":"Models","description":"Models are JSON files that determine the visual shape and texture(s) of a block or item. A model consists of cuboid elements, each with their own size, that then get assigned a texture to each face.","sidebar":"mainSidebar"},"resources/client/models/modelloaders":{"id":"resources/client/models/modelloaders","title":"Custom Model Loaders","description":"A model is simply a shape. It can be a cube, a collection of cubes, a collection of triangles, or any other geometrical shape (or collection of geometrical shape). For most contexts, it is not relevant how a model is defined, as everything will end up as a BakedModel in memory anyway. As such, NeoForge adds the ability to register custom model loaders that can transform any model you want into a BakedModel for the game to use.","sidebar":"mainSidebar"},"resources/client/particles":{"id":"resources/client/particles","title":"Particles","description":"Particles are 2D effects that polish the game and add immersion. They can be spawned both client and server [side], but being mostly visual in nature, critical parts exist only on the physical (and logical) client side.","sidebar":"mainSidebar"},"resources/client/sounds":{"id":"resources/client/sounds","title":"Sounds","description":"Sounds, while not required for anything, can make a mod feel much more nuanced and alive. Minecraft offers you various ways to register and play sounds, which will be laid out in this article.","sidebar":"mainSidebar"},"resources/client/textures":{"id":"resources/client/textures","title":"Textures","description":"All textures in Minecraft are PNG files located within a namespace\'s textures folder. JPG, GIF and other image formats are not supported. The path of resource locations referring to textures is generally relative to the textures folder, so for example, the resource location examplemod:block/exampleblock refers to the texture file at assets/examplemod/textures/block/exampleblock.png.","sidebar":"mainSidebar"},"resources/index":{"id":"resources/index","title":"Resources","description":"Resources are external files that are used by the game, but are not code. The most prominent kinds of resources are textures, however, many other types of resources exist in the Minecraft ecosystem. Of course, all these resources require a consumer on the code side, so the consuming systems are grouped in this section as well.","sidebar":"mainSidebar"},"resources/server/advancements":{"id":"resources/server/advancements","title":"Advancements","description":"Advancements are tasks that can be achieved by the player which may advance the progress of the game. Advancements can trigger based on any action the player may be directly involved in.","sidebar":"mainSidebar"},"resources/server/conditional":{"id":"resources/server/conditional","title":"Conditionally-Loaded Data","description":"There are times when modders may want to include data-driven objects using information from another mod without having to explicitly make that mod a dependency. Other cases may be to swap out certain objects with other modded entries when they are present. This can be done through the conditional subsystem.","sidebar":"mainSidebar"},"resources/server/glm":{"id":"resources/server/glm","title":"Global Loot Modifiers","description":"Global Loot Modifiers are a data-driven method of handling modification of harvested drops without the need to overwrite dozens to hundreds of vanilla loot tables or to handle effects that would require interactions with another mod\'s loot tables without knowing what mods may be loaded. Global Loot Modifiers are also stacking, rather than last-load-wins, similar to tags.","sidebar":"mainSidebar"},"resources/server/index":{"id":"resources/server/index","title":"Datapacks","description":"In 1.13, Mojang added datapacks to the base game. They allow for the modification of the files for logical servers through the data directory. This includes advancements, loot_tables, structures, recipes, tags, etc. Forge, and your mod, can also have datapacks. Any user can therefore modify all the recipes, loot tables, and other data defined within this directory.","sidebar":"mainSidebar"},"resources/server/loottables":{"id":"resources/server/loottables","title":"Loot Tables","description":"Loot tables are logic files which dictate what should happen when various actions or scenarios occur. Although the vanilla system deals purely with item generation, the system can be expanded to perform any number of defined actions.","sidebar":"mainSidebar"},"resources/server/recipes/custom":{"id":"resources/server/recipes/custom","title":"Custom Recipes","description":"Every recipe definition is made up of three components: the Recipe implementation which holds the data and handles the execution logic with the provided inputs, the RecipeType which represents the category or context the recipe will be used in, and the RecipeSerializer which handles decoding and network communication of the recipe data. How one chooses to use the recipe is up to the implementor.","sidebar":"mainSidebar"},"resources/server/recipes/incode":{"id":"resources/server/recipes/incode","title":"Non-Datapack Recipes","description":"Not all recipes are simplistic enough or migrated to using data-driven recipes. Some subsystems still need to be patched within the codebase to provide support for adding new recipes.","sidebar":"mainSidebar"},"resources/server/recipes/index":{"id":"resources/server/recipes/index","title":"Recipes","description":"Recipes are a way to transform some number of objects into other objects within a Minecraft world. Although the vanilla system deals purely with item transformations, the system as a whole can be expanded to use any object the programmer creates.","sidebar":"mainSidebar"},"resources/server/recipes/ingredients":{"id":"resources/server/recipes/ingredients","title":"Ingredients","description":"Ingredients are predicate handlers for item-based inputs which check whether a certain ItemStack meets the condition to be a valid input in a recipe. All vanilla recipes that take inputs use an Ingredient or a list of Ingredients, which is then merged into a single Ingredient.","sidebar":"mainSidebar"},"resources/server/tags":{"id":"resources/server/tags","title":"Tags","description":"Tags are generalized sets of objects in the game used for grouping related things together and providing fast membership checks.","sidebar":"mainSidebar"}}}')}}]);