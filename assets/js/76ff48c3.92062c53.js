"use strict";(self.webpackChunkneoforged_docs=self.webpackChunkneoforged_docs||[]).push([[3542],{5838:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>i,toc:()=>l});var n=t(5893),o=t(1151);const s={},r="JSON Structure",i={id:"datamaps/structure",title:"JSON Structure",description:"For the purposes of this page, we will use a data map which is an object with two float keys: amount and chance as an example. The codec for that object can be found here.",source:"@site/docs/datamaps/structure.md",sourceDirName:"datamaps",slug:"/datamaps/structure",permalink:"/Neoforge-Korean-Documentation/docs/datamaps/structure",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Built-in Data Maps",permalink:"/Neoforge-Korean-Documentation/docs/datamaps/neo_maps"},next:{title:"\ub370\uc774\ud130 \ubd80\ucc29",permalink:"/Neoforge-Korean-Documentation/docs/datastorage/attachments"}},c={},l=[{value:"Location",id:"location",level:2},{value:"Global <code>replace</code> field",id:"global-replace-field",level:2},{value:"Loading conditions",id:"loading-conditions",level:2},{value:"Adding values",id:"adding-values",level:2},{value:"Removing values",id:"removing-values",level:2}];function d(e){const a={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.h1,{id:"json-structure",children:"JSON Structure"}),"\n",(0,n.jsxs)(a.p,{children:["For the purposes of this page, we will use a data map which is an object with two float keys: ",(0,n.jsx)(a.code,{children:"amount"})," and ",(0,n.jsx)(a.code,{children:"chance"})," as an example. The codec for that object can be found ",(0,n.jsx)(a.a,{href:"/Neoforge-Korean-Documentation/docs/datamaps/#registration",children:"here"}),"."]}),"\n",(0,n.jsx)(a.h2,{id:"location",children:"Location"}),"\n",(0,n.jsxs)(a.p,{children:["Data maps are loaded from a JSON file located at ",(0,n.jsx)(a.code,{children:"mapNamespace/data_maps/registryNamespace/registryPath/mapPath.json"}),", where:"]}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.code,{children:"mapNamespace"})," is the namespace of the ID of the data map"]}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.code,{children:"mapPath"})," is the path of the ID of the data map"]}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.code,{children:"registryNamespace"})," is the namespace of the ID of the registry"]}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.code,{children:"registryPath"})," is the path of the ID of the registry"]}),"\n"]}),"\n",(0,n.jsx)(a.admonition,{type:"note",children:(0,n.jsxs)(a.p,{children:["The registry namespace is ommited if it is ",(0,n.jsx)(a.code,{children:"minecraft"}),"."]})}),"\n",(0,n.jsx)(a.p,{children:"Examples:"}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsxs)(a.li,{children:["For a data map named ",(0,n.jsx)(a.code,{children:"mymod:drop_healing"})," for the ",(0,n.jsx)(a.code,{children:"minecraft:item"})," registry (as in the example), the path will be ",(0,n.jsx)(a.code,{children:"mymod/data_maps/item/drop_healing.json"}),"."]}),"\n",(0,n.jsxs)(a.li,{children:["For a data map named ",(0,n.jsx)(a.code,{children:"somemod:somemap"})," for the ",(0,n.jsx)(a.code,{children:"minecraft:block"})," registry, the path will be ",(0,n.jsx)(a.code,{children:"somemod/data_maps/block/somemap.json"}),"."]}),"\n",(0,n.jsxs)(a.li,{children:["For a data map named ",(0,n.jsx)(a.code,{children:"example:stuff"})," for the ",(0,n.jsx)(a.code,{children:"somemod:custom"})," registry, the path will be ",(0,n.jsx)(a.code,{children:"example/data_maps/somemod/custom/stuff.json"}),"."]}),"\n"]}),"\n",(0,n.jsxs)(a.h2,{id:"global-replace-field",children:["Global ",(0,n.jsx)(a.code,{children:"replace"})," field"]}),"\n",(0,n.jsxs)(a.p,{children:["The JSON file has an optional, global ",(0,n.jsx)(a.code,{children:"replace"})," field, which is similar to tags, and when ",(0,n.jsx)(a.code,{children:"true"})," will remove all previously attached values of that data map. This is useful for datapacks that want to completely change the entire data map."]}),"\n",(0,n.jsx)(a.h2,{id:"loading-conditions",children:"Loading conditions"}),"\n",(0,n.jsxs)(a.p,{children:["Data map files support ",(0,n.jsx)(a.a,{href:"/Neoforge-Korean-Documentation/docs/resources/server/conditional",children:"loading conditions"})," both at root-level and at entry-level through a ",(0,n.jsx)(a.code,{children:"neoforge:conditions"})," array."]}),"\n",(0,n.jsx)(a.h2,{id:"adding-values",children:"Adding values"}),"\n",(0,n.jsxs)(a.p,{children:["Values can be attached to objects using the ",(0,n.jsx)(a.code,{children:"values"})," map. Each key will represent either the ID of an individual registry entry to attach the value to, or a tag key, preceeded by ",(0,n.jsx)(a.code,{children:"#"}),". If it is a tag, the same value will be attached to all entries in that tag. The key will be the object to attach."]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-json5",children:'{\n    "values": {\n        // Attach a value to the carrot item\n        "minecraft:carrot": {\n            "amount": 12,\n            "chance": 1\n        },\n        // Attach a value to all items in the logs tag\n        "#minecraft:logs": {\n            "amount": 1,\n            "chance": 0.1\n        }\n    }\n}\n'})}),"\n",(0,n.jsxs)(a.admonition,{type:"info",children:[(0,n.jsxs)(a.p,{children:["The above structure will invoke mergers in the case of ",(0,n.jsx)(a.a,{href:"/Neoforge-Korean-Documentation/docs/datamaps/#advanced-data-maps",children:"advanced data maps"}),". If you do not want to invoke the merger for a specific object, then you will have to use a structure similar to this one:"]}),(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-json5",children:'{\n    "values": {\n        // Overwrite the value of the carrot item\n        "minecraft:carrot": {\n            // highlight-next-line\n            "replace": true,\n            // The new value will be under a value sub-object\n            "value": {\n                "amount": 12,\n                "chance": 1\n            }\n        }\n    }\n}\n'})})]}),"\n",(0,n.jsx)(a.h2,{id:"removing-values",children:"Removing values"}),"\n",(0,n.jsxs)(a.p,{children:["A JSON file can also remove values previously attached to objects, through the use of the ",(0,n.jsx)(a.code,{children:"remove"})," array:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-json5",children:'{\n    // Remove the value attached to apples and potatoes\n    "remove": ["minecraft:apple", "minecraft:potato"]\n}\n'})}),"\n",(0,n.jsx)(a.p,{children:"The array contains a list of registry entry IDs or tags to remove the value from."}),"\n",(0,n.jsxs)(a.admonition,{type:"warning",children:[(0,n.jsx)(a.p,{children:"Removals happen after the values in the current JSON file have been attached, so you can use the removal feature to remove a value attached to an object through a tag:"}),(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-json5",children:'{\n    "values": {\n        "#minecraft:logs": 12\n    },\n    // Remove the value from the acacia log, so that all logs but acacia have the value 12 attached to them\n    "remove": ["minecraft:acacia_log"]\n}\n'})})]}),"\n",(0,n.jsxs)(a.admonition,{type:"info",children:[(0,n.jsxs)(a.p,{children:["In the case of ",(0,n.jsx)(a.a,{href:"/Neoforge-Korean-Documentation/docs/datamaps/#advanced-data-maps",children:"advanced data maps"})," that provide a custom remover, the arguments of the remover can be provided by transforming the ",(0,n.jsx)(a.code,{children:"remove"})," array into a map.",(0,n.jsx)(a.br,{}),"\n","Let's assume that the remover object is serialized as a string and removes the value with a given key for a ",(0,n.jsx)(a.code,{children:"Map"}),"-based data map:"]}),(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-json5",children:'{\n    "remove": {\n        // The remover will be deserialized from the value (`somekey1` in this case)\n        // and applied to the value attached to the carrot item\n        "minecraft:carrot": "somekey1"\n    }\n}\n'})})]})]})}function h(e={}){const{wrapper:a}={...(0,o.a)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},1151:(e,a,t)=>{t.d(a,{Z:()=>i,a:()=>r});var n=t(7294);const o={},s=n.createContext(o);function r(e){const a=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),n.createElement(s.Provider,{value:a},e.children)}}}]);