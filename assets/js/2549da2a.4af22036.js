"use strict";(self.webpackChunkneoforged_docs=self.webpackChunkneoforged_docs||[]).push([[5951],{5940:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>d,metadata:()=>s,toc:()=>c});var t=o(5893),i=o(1151);const d={},r="Conditionally-Loaded Data",s={id:"resources/server/conditional",title:"Conditionally-Loaded Data",description:"There are times when modders may want to include data-driven objects using information from another mod without having to explicitly make that mod a dependency. Other cases may be to swap out certain objects with other modded entries when they are present. This can be done through the conditional subsystem.",source:"@site/docs/resources/server/conditional.md",sourceDirName:"resources/server",slug:"/resources/server/conditional",permalink:"/Neoforge-Korean-Documentation/docs/resources/server/conditional",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Advancements",permalink:"/Neoforge-Korean-Documentation/docs/resources/server/advancements"},next:{title:"Global Loot Modifiers",permalink:"/Neoforge-Korean-Documentation/docs/resources/server/glm"}},a={},c=[{value:"Implementations",id:"implementations",level:2},{value:"Conditions",id:"conditions",level:2},{value:"True and False",id:"true-and-false",level:3},{value:"Not, And, and Or",id:"not-and-and-or",level:3},{value:"Mod Loaded",id:"mod-loaded",level:3},{value:"Item Exists",id:"item-exists",level:3},{value:"Tag Empty",id:"tag-empty",level:3},{value:"Creating Custom Conditions",id:"creating-custom-conditions",level:2},{value:"ICondition",id:"icondition",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"conditionally-loaded-data",children:"Conditionally-Loaded Data"}),"\n",(0,t.jsx)(n.p,{children:"There are times when modders may want to include data-driven objects using information from another mod without having to explicitly make that mod a dependency. Other cases may be to swap out certain objects with other modded entries when they are present. This can be done through the conditional subsystem."}),"\n",(0,t.jsx)(n.h2,{id:"implementations",children:"Implementations"}),"\n",(0,t.jsxs)(n.p,{children:["Conditions are loaded from a top-level ",(0,t.jsx)(n.code,{children:"neoforge:conditions"})," array of objects that represent the conditions to check. If all conditions specified are met, then the rest of the JSON will be loaded, or ",(0,t.jsx)(n.code,{children:"neoforge:value"})," if the value is not an object; otherwise, it will be discarded."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json5",children:'{\n    "neoforge:conditions": [\n        // Condition 1\n        {\n        \n        },\n        // Condition 2\n        {\n\n        }\n    ],\n\n    // The rest of the object\n    // ...\n}\n'})}),"\n",(0,t.jsxs)(n.p,{children:["All JSON files support conditions; however, only a few data providers have been directly patched for ",(0,t.jsx)(n.a,{href:"/Neoforge-Korean-Documentation/docs/resources/#data-generation",children:"data generation"}),". Currently, the following data generators support conditions:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Recipes via ",(0,t.jsx)(n.code,{children:"RecipeOutput#withConditions"})]}),"\n",(0,t.jsxs)(n.li,{children:["Implementations of ",(0,t.jsx)(n.code,{children:"JsonCodecProvider"})," via ",(0,t.jsx)(n.code,{children:"conditionally"})," (e.g. ",(0,t.jsx)(n.code,{children:"SpriteSourceProvider"}),")"]}),"\n",(0,t.jsxs)(n.li,{children:["Data Maps via ",(0,t.jsx)(n.code,{children:"DataMapProvider.Builder#add"})]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"Loot tables that do not meet their loading conditions will not be ignored, but rather replaced with an empty loot table."})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json5",metastring:'title="Example recipe that will only be loaded if the examplemod mod is loaded"',children:'{\n    // highlight-start\n    "neoforge:conditions": [\n        {\n            "type": "neoforge:mod_loaded",\n            "modid": "examplemod"\n        }\n    ],\n    // highlight-end\n\n    "type": "minecraft:crafting_shaped",\n    "category": "redstone",\n    "key": {\n        "#": {\n            "item": "examplemod:example_planks"\n        }\n    },\n    "pattern": [\n        "##",\n        "##",\n        "##"\n    ],\n    "result": {\n        "count": 3,\n        "item": "mymod:compat_door"\n    }\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"conditions",children:"Conditions"}),"\n",(0,t.jsx)(n.h3,{id:"true-and-false",children:"True and False"}),"\n",(0,t.jsxs)(n.p,{children:["Boolean conditions consist of no data and return the expected value of the condition. They are represented by ",(0,t.jsx)(n.code,{children:"neoforge:true"})," and ",(0,t.jsx)(n.code,{children:"neoforge:false"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json5",children:'// For some condition\n{\n    // Will always return true (or false for \'neoforge:false\')\n    "type": "neoforge:true"\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"not-and-and-or",children:"Not, And, and Or"}),"\n",(0,t.jsxs)(n.p,{children:["Boolean operator conditions consist of the condition(s) being operated upon and apply the following logic. They are represented by ",(0,t.jsx)(n.code,{children:"neoforge:not"}),", ",(0,t.jsx)(n.code,{children:"neoforge:and"}),", and ",(0,t.jsx)(n.code,{children:"neoforge:or"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json5",children:'// For some condition\n{\n    // Inverts the result of the stored condition\n    "type": "neoforge:not",\n    "value": {\n        // A condition\n    }\n}\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json5",children:'// For some condition\n{\n    // ANDs the stored conditions together (or ORs for \'neoforge:or\')\n    "type": "neoforge:and",\n    "values": [\n        {\n            // First condition\n        },\n        {\n            // Second condition to be ANDed (or ORed for \'neoforge:or\')\n        }\n    ]\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"mod-loaded",children:"Mod Loaded"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"ModLoadedCondition"})," returns true whenever the specified mod with the given id is loaded in the current application. This is represented by ",(0,t.jsx)(n.code,{children:"neoforge:mod_loaded"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json5",children:'// For some condition\n{\n    "type": "neoforge:mod_loaded",\n    // Returns true if \'examplemod\' is loaded\n    "modid": "examplemod"\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"item-exists",children:"Item Exists"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"ItemExistsCondition"})," returns true whenever the given item has been registered in the current application. This is represented by ",(0,t.jsx)(n.code,{children:"neoforge:item_exists"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json5",children:'// For some condition\n{\n    "type": "neoforge:item_exists",\n    // Returns true if \'examplemod:example_item\' has been registered\n    "item": "examplemod:example_item"\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"tag-empty",children:"Tag Empty"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"TagEmptyCondition"})," returns true whenever the given item tag has no items within it. This is represented by ",(0,t.jsx)(n.code,{children:"neoforge:tag_empty"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-json5",children:'// For some condition\n{\n    "type": "neoforge:tag_empty",\n    // Returns true if \'examplemod:example_tag\' is an item tag with no entries\n    "tag": "examplemod:example_tag"\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"creating-custom-conditions",children:"Creating Custom Conditions"}),"\n",(0,t.jsxs)(n.p,{children:["Custom conditions can be created by implementing ",(0,t.jsx)(n.code,{children:"ICondition"})," and creating a ",(0,t.jsx)(n.a,{href:"../../datastorage/codecs",children:"map codec"})," for it."]}),"\n",(0,t.jsx)(n.h3,{id:"icondition",children:"ICondition"}),"\n",(0,t.jsxs)(n.p,{children:["A condition needs to implement the ",(0,t.jsx)(n.code,{children:"ICondition#test(IContext)"})," method. This method will return ",(0,t.jsx)(n.code,{children:"true"})," if the object should be loaded, and ",(0,t.jsx)(n.code,{children:"false"})," otherwise."]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:["Every ",(0,t.jsx)(n.code,{children:"#test"})," has access to some ",(0,t.jsx)(n.code,{children:"IContext"})," representing the state of the game. Currently, this only allows obtaining tags from a registry."]})}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsxs)(n.p,{children:["Some objects may be loaded earlier than tags. In those cases, the condition context will be ",(0,t.jsx)(n.code,{children:"IContext.EMPTY"}),"."]})}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"ICondition#codec"})," method should return the codec used to encode and decode the condition. This codec ",(0,t.jsx)(n.strong,{children:"must"})," be ",(0,t.jsx)(n.a,{href:"../../concepts/registries",children:"registered"})," to the ",(0,t.jsx)(n.code,{children:"NeoForgeRegistries#CONDITION_SERIALIZERS"})," registry. The name the codec is registered under will be the name used to refer to that condition in the ",(0,t.jsx)(n.code,{children:"type"})," field."]})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},1151:(e,n,o)=>{o.d(n,{Z:()=>s,a:()=>r});var t=o(7294);const i={},d=t.createContext(i);function r(e){const n=t.useContext(d);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(d.Provider,{value:n},e.children)}}}]);