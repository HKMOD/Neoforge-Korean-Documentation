"use strict";(self.webpackChunkneoforged_docs=self.webpackChunkneoforged_docs||[]).push([[9082],{9855:(e,d,n)=>{n.r(d),n.d(d,{assets:()=>s,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>a});var t=n(5893),o=n(1151);const i={},r="Model Generation",l={id:"datagen/client/modelproviders",title:"Model Generation",description:"Models] can be generated for models or block states by default. Each provides a method of generating the necessary JSONs (ModelBuilder#toJson for models and IGeneratedBlockState#toJson for block states). After implementation, the [associated providers must be added to the DataGenerator.",source:"@site/docs/datagen/client/modelproviders.md",sourceDirName:"datagen/client",slug:"/datagen/client/modelproviders",permalink:"/Neoforge-Korean-Documentation/docs/datagen/client/modelproviders",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Language Generation",permalink:"/Neoforge-Korean-Documentation/docs/datagen/client/localization"},next:{title:"Sound Definition Generation",permalink:"/Neoforge-Korean-Documentation/docs/datagen/client/sounds"}},s={},a=[{value:"Model Files",id:"model-files",level:2},{value:"Existing Model Files",id:"existing-model-files",level:3},{value:"Unchecked Model Files",id:"unchecked-model-files",level:3},{value:"Model Builders",id:"model-builders",level:2},{value:"<code>BlockModelBuilder</code>",id:"blockmodelbuilder",level:3},{value:"<code>ItemModelBuilder</code>",id:"itemmodelbuilder",level:3},{value:"Model Providers",id:"model-providers",level:2},{value:"<code>BlockModelProvider</code>",id:"blockmodelprovider",level:3},{value:"<code>ItemModelProvider</code>",id:"itemmodelprovider",level:3},{value:"Block State Provider",id:"block-state-provider",level:2},{value:"<code>VariantBlockStateBuilder</code>",id:"variantblockstatebuilder",level:3},{value:"<code>MultiPartBlockStateBuilder</code>",id:"multipartblockstatebuilder",level:3},{value:"Model Loader Builders",id:"model-loader-builders",level:2},{value:"Custom Model Loader Builders",id:"custom-model-loader-builders",level:2},{value:"Custom Model Providers",id:"custom-model-providers",level:2},{value:"Custom Model Consumers",id:"custom-model-consumers",level:2}];function c(e){const d={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,o.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(d.h1,{id:"model-generation",children:"Model Generation"}),"\n",(0,t.jsxs)(d.p,{children:[(0,t.jsx)(d.a,{href:"/Neoforge-Korean-Documentation/docs/resources/client/models/",children:"Models"})," can be generated for models or block states by default. Each provides a method of generating the necessary JSONs (",(0,t.jsx)(d.code,{children:"ModelBuilder#toJson"})," for models and ",(0,t.jsx)(d.code,{children:"IGeneratedBlockState#toJson"})," for block states). After implementation, the ",(0,t.jsx)(d.a,{href:"#model-providers",children:"associated providers"})," must be ",(0,t.jsx)(d.a,{href:"/Neoforge-Korean-Documentation/docs/datagen/#dataprovider",children:"added"})," to the ",(0,t.jsx)(d.code,{children:"DataGenerator"}),"."]}),"\n",(0,t.jsx)(d.pre,{children:(0,t.jsx)(d.code,{className:"language-java",children:"// On the MOD event bus\n@SubscribeEvent\npublic void gatherData(GatherDataEvent event) {\n    DataGenerator gen = event.getGenerator();\n    ExistingFileHelper efh = event.getExistingFileHelper();\n\n    gen.addProvider(\n        // Tell generator to run only when client assets are generating\n        event.includeClient(),\n        output -> new MyItemModelProvider(output, MOD_ID, efh)\n    );\n    gen.addProvider(\n        event.includeClient(),\n        output -> new MyBlockStateProvider(output, MOD_ID, efh)\n    );\n}\n"})}),"\n",(0,t.jsx)(d.h2,{id:"model-files",children:"Model Files"}),"\n",(0,t.jsxs)(d.p,{children:["A ",(0,t.jsx)(d.code,{children:"ModelFile"})," acts as the base for all models referenced or generated by a provider. Each model file stores the location relative to the ",(0,t.jsx)(d.code,{children:"models"})," subdirectory and can assert whether the file exists."]}),"\n",(0,t.jsx)(d.h3,{id:"existing-model-files",children:"Existing Model Files"}),"\n",(0,t.jsxs)(d.p,{children:[(0,t.jsx)(d.code,{children:"ExistingModelFile"})," is a subclass of ",(0,t.jsx)(d.code,{children:"ModelFile"})," which checks via ",(0,t.jsx)(d.a,{href:"/Neoforge-Korean-Documentation/docs/datagen/#%EC%99%B8%EB%B6%80-%EC%97%90%EC%85%8B-%EC%B0%B8%EC%A1%B0%ED%95%98%EA%B8%B0",children:(0,t.jsx)(d.code,{children:"ExistingFileHelper#exists"})})," whether the model already exists within the ",(0,t.jsx)(d.code,{children:"models"})," subdirectory. All non-generated models are usually referenced through ",(0,t.jsx)(d.code,{children:"ExistingModelFile"}),"s."]}),"\n",(0,t.jsx)(d.h3,{id:"unchecked-model-files",children:"Unchecked Model Files"}),"\n",(0,t.jsxs)(d.p,{children:[(0,t.jsx)(d.code,{children:"UncheckedModelFile"})," is a subclass of ",(0,t.jsx)(d.code,{children:"ModelFile"})," which assumes the specified model exists in some location."]}),"\n",(0,t.jsx)(d.admonition,{type:"note",children:(0,t.jsxs)(d.p,{children:["There should be no cases where an ",(0,t.jsx)(d.code,{children:"UncheckedModelFile"})," is used to reference a model. If there is, then the associated resources are not properly being tracked by ",(0,t.jsx)(d.code,{children:"ExistingFileHelper"}),"."]})}),"\n",(0,t.jsx)(d.h2,{id:"model-builders",children:"Model Builders"}),"\n",(0,t.jsxs)(d.p,{children:["A ",(0,t.jsx)(d.code,{children:"ModelBuilder"})," represents a to-be-generated ",(0,t.jsx)(d.code,{children:"ModelFile"}),". It contains all the data about a model: its parent, faces, textures, transformations, lighting, and ",(0,t.jsx)(d.a,{href:"#custom-model-loader-builders",children:"loader"}),"."]}),"\n",(0,t.jsx)(d.admonition,{type:"tip",children:(0,t.jsx)(d.p,{children:"While a complex model can be generated, it is recommended that those models be constructed using a modeling software beforehand. Then, the data provider can generate the children models with specific textures applied through the defined references in the parent complex model."})}),"\n",(0,t.jsxs)(d.p,{children:["The parent (via ",(0,t.jsx)(d.code,{children:"ModelBuilder#parent"}),") of the builder can be any ",(0,t.jsx)(d.code,{children:"ModelFile"}),": generated or existing. Generated files are added to ",(0,t.jsx)(d.code,{children:"ModelProvider"}),"s as soon as the builder is created. The builder itself can be passed in as a parent, or the ",(0,t.jsx)(d.code,{children:"ResourceLocation"})," can supplied alternatively."]}),"\n",(0,t.jsx)(d.admonition,{type:"caution",children:(0,t.jsxs)(d.p,{children:["If the parent is not generated before the child model when passing in a ",(0,t.jsx)(d.code,{children:"ResourceLocation"}),", then an exception will be thrown."]})}),"\n",(0,t.jsxs)(d.p,{children:["Each element (via ",(0,t.jsx)(d.code,{children:"ModelBuilder#element"}),") within a model is defined as cube using two three-dimensional points (",(0,t.jsx)(d.code,{children:"ElementBuilder#from"})," and ",(0,t.jsx)(d.code,{children:"#to"})," respectively) where each axis is limited to the values ",(0,t.jsx)(d.code,{children:"[-16,32]"})," (between -16 and 32 inclusive). Each face (",(0,t.jsx)(d.code,{children:"ElementBuilder#face"}),") of the cube can specify when the face is culled (",(0,t.jsx)(d.code,{children:"FaceBuilder#cullface"}),"), ",(0,t.jsx)(d.a,{href:"/Neoforge-Korean-Documentation/docs/resources/client/models/tinting#blockcoloritemcolor",children:"tint index"})," (",(0,t.jsx)(d.code,{children:"FaceBuilder#tintindex"}),"), texture reference from the ",(0,t.jsx)(d.code,{children:"textures"})," keys (",(0,t.jsx)(d.code,{children:"FaceBuilder#texture"}),"), UV coordinate on the texture (",(0,t.jsx)(d.code,{children:"FaceBuilder#uvs"}),"), and rotation in 90 degree intervals (",(0,t.jsx)(d.code,{children:"FaceBuilder#rotation"}),")."]}),"\n",(0,t.jsx)(d.admonition,{type:"note",children:(0,t.jsxs)(d.p,{children:["It recommended for block models which have elements that exceed a bound of ",(0,t.jsx)(d.code,{children:"[0,16]"})," on any axis to separate into multiple blocks, such as for a multiblock structure, to avoid lighting and culling issues."]})}),"\n",(0,t.jsxs)(d.p,{children:["Each cube can additionally be rotated (",(0,t.jsx)(d.code,{children:"ElementBuilder#rotation"}),") around a specified point (",(0,t.jsx)(d.code,{children:"RotationBuilder#origin"}),") for a given axis (",(0,t.jsx)(d.code,{children:"RotationBuilder#axis"}),") in 22.5 degree intervals (",(0,t.jsx)(d.code,{children:"RotationBuilder#angle"}),"). The cube can scale all faces in relation to the entire model as well (",(0,t.jsx)(d.code,{children:"RotationBuilder#rescale"}),"). The cube can also determine whether its shadows should be rendered (",(0,t.jsx)(d.code,{children:"ElementBuilder#shade"}),")."]}),"\n",(0,t.jsxs)(d.p,{children:["Each model defines a list of texture keys (",(0,t.jsx)(d.code,{children:"ModelBuilder#texture"}),") which points to either a location or a reference. Each key can then be referenced in any element by prefixing using a ",(0,t.jsx)(d.code,{children:"#"})," (a texture key of ",(0,t.jsx)(d.code,{children:"example"})," can be referenced in an element using ",(0,t.jsx)(d.code,{children:"#example"}),"). A location specifies where a texture is in ",(0,t.jsx)(d.code,{children:"assets/<namespace>/textures/<path>.png"}),". A reference is used by any models parenting the current model as keys to define textures for later."]}),"\n",(0,t.jsxs)(d.p,{children:["The model can additionally be transformed (",(0,t.jsx)(d.code,{children:"ModelBuilder#transforms"}),") for any defined perspective (in the left hand in first person, in the gui, on the ground, etc.). For any perspective (",(0,t.jsx)(d.code,{children:"TransformsBuilder#transform"}),"), the rotation (",(0,t.jsx)(d.code,{children:"TransformVecBuilder#rotation"}),"), translation (",(0,t.jsx)(d.code,{children:"TransformVecBuilder#translation"}),"), and scale (",(0,t.jsx)(d.code,{children:"TransformVecBuilder#scale"}),") can be set."]}),"\n",(0,t.jsxs)(d.p,{children:["Finally, the model can set whether to use ambient occlusion in a level (",(0,t.jsx)(d.code,{children:"ModelBuilder#ao"}),") and from what location to light and shade the model from ",(0,t.jsx)(d.code,{children:"ModelBuilder#guiLight"}),"."]}),"\n",(0,t.jsx)(d.h3,{id:"blockmodelbuilder",children:(0,t.jsx)(d.code,{children:"BlockModelBuilder"})}),"\n",(0,t.jsxs)(d.p,{children:["A ",(0,t.jsx)(d.code,{children:"BlockModelBuilder"})," represents a block model to-be-generated. In addition to the ",(0,t.jsx)(d.code,{children:"ModelBuilder"}),", a transform to the entire model (",(0,t.jsx)(d.code,{children:"BlockModelBuilder#rootTransform"}),") can be generated. The root can be translated (",(0,t.jsx)(d.code,{children:"RootTransformBuilder#transform"}),"), rotated (",(0,t.jsx)(d.code,{children:"RootTransformBuilder#rotation"}),", ",(0,t.jsx)(d.code,{children:"RootTransformBuilder#postRotation"}),"), and scaled (",(0,t.jsx)(d.code,{children:"RootTransformBuilder#scale"}),") either individually or all in one transformation (",(0,t.jsx)(d.code,{children:"RootTransformBuilder#transform"}),") around some origin (",(0,t.jsx)(d.code,{children:"RootTransformBuilder#origin"}),")."]}),"\n",(0,t.jsx)(d.h3,{id:"itemmodelbuilder",children:(0,t.jsx)(d.code,{children:"ItemModelBuilder"})}),"\n",(0,t.jsxs)(d.p,{children:["An ",(0,t.jsx)(d.code,{children:"ItemModelBuilder"})," represents an item model to-be-generated. In addition to the ",(0,t.jsx)(d.code,{children:"ModelBuilder"}),", ",(0,t.jsx)(d.a,{href:"/Neoforge-Korean-Documentation/docs/resources/client/models/itemproperties",children:"overrides"})," (",(0,t.jsx)(d.code,{children:"OverrideBuilder#override"}),") can be generated. Each override applied to a model can apply conditions which represent for a given property that must be above the specified value (",(0,t.jsx)(d.code,{children:"OverrideBuilder#predicate"}),"). If the conditions are met, then the specified model (",(0,t.jsx)(d.code,{children:"OverrideBuilder#model"}),") will be rendered instead of this model."]}),"\n",(0,t.jsx)(d.h2,{id:"model-providers",children:"Model Providers"}),"\n",(0,t.jsxs)(d.p,{children:["The ",(0,t.jsx)(d.code,{children:"ModelProvider"})," subclasses are responsible for generating the constructed ",(0,t.jsx)(d.code,{children:"ModelBuilder"}),"s. The provider takes in the generator, mod id, subdirectory in the ",(0,t.jsx)(d.code,{children:"models"})," folder to generate within, a ",(0,t.jsx)(d.code,{children:"ModelBuilder"})," factory, and the existing file helper. Each provider subclass must implement ",(0,t.jsx)(d.code,{children:"#registerModels"}),"."]}),"\n",(0,t.jsxs)(d.p,{children:["The provider contains basic methods which either create the ",(0,t.jsx)(d.code,{children:"ModelBuilder"})," or provides convenience for getting texture or model references:"]}),"\n",(0,t.jsxs)(d.table,{children:[(0,t.jsx)(d.thead,{children:(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.th,{style:{textAlign:"center"},children:"Method"}),(0,t.jsx)(d.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,t.jsxs)(d.tbody,{children:[(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{style:{textAlign:"center"},children:(0,t.jsx)(d.code,{children:"getBuilder"})}),(0,t.jsxs)(d.td,{style:{textAlign:"left"},children:["Creates a new ",(0,t.jsx)(d.code,{children:"ModelBuilder"})," within the provider's subdirectory for the given mod id."]})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{style:{textAlign:"center"},children:(0,t.jsx)(d.code,{children:"withExistingParent"})}),(0,t.jsxs)(d.td,{style:{textAlign:"left"},children:["Creates a new ",(0,t.jsx)(d.code,{children:"ModelBuilder"})," for the given parent. Should be used when the parent is not generated by the builder."]})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{style:{textAlign:"center"},children:(0,t.jsx)(d.code,{children:"mcLoc"})}),(0,t.jsxs)(d.td,{style:{textAlign:"left"},children:["Creates a ",(0,t.jsx)(d.code,{children:"ResourceLocation"})," for the path in the ",(0,t.jsx)(d.code,{children:"minecraft"})," namespace."]})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{style:{textAlign:"center"},children:(0,t.jsx)(d.code,{children:"modLoc"})}),(0,t.jsxs)(d.td,{style:{textAlign:"left"},children:["Creates a ",(0,t.jsx)(d.code,{children:"ResourceLocation"})," for the path in the given mod id's namespace."]})]})]})]}),"\n",(0,t.jsx)(d.p,{children:"Additionally, there are several helpers for easily generating common models using vanilla templates. Most are for block models with only a few being universal."}),"\n",(0,t.jsx)(d.admonition,{type:"note",children:(0,t.jsxs)(d.p,{children:["Although the models are within a specific subdirectory, that does ",(0,t.jsx)(d.strong,{children:"not"})," mean that the model cannot be referenced by a model in another subdirectory. Usually, it is indicative of that model being used for that type of object."]})}),"\n",(0,t.jsx)(d.h3,{id:"blockmodelprovider",children:(0,t.jsx)(d.code,{children:"BlockModelProvider"})}),"\n",(0,t.jsxs)(d.p,{children:["The ",(0,t.jsx)(d.code,{children:"BlockModelProvider"})," is used for generating block models via ",(0,t.jsx)(d.code,{children:"BlockModelBuilder"})," in the ",(0,t.jsx)(d.code,{children:"block"})," folder. Block models should typically parent ",(0,t.jsx)(d.code,{children:"minecraft:block/block"})," or one of its children models for use with item models."]}),"\n",(0,t.jsx)(d.admonition,{type:"note",children:(0,t.jsxs)(d.p,{children:["Block models and its item model counterpart are typically not generated through a direct subclass of ",(0,t.jsx)(d.code,{children:"BlockModelProvider"})," and ",(0,t.jsx)(d.code,{children:"ItemModelProvider"})," but through ",(0,t.jsx)(d.a,{href:"#block-state-provider",children:(0,t.jsx)(d.code,{children:"BlockStateProvider"})}),"."]})}),"\n",(0,t.jsx)(d.h3,{id:"itemmodelprovider",children:(0,t.jsx)(d.code,{children:"ItemModelProvider"})}),"\n",(0,t.jsxs)(d.p,{children:["The ",(0,t.jsx)(d.code,{children:"ItemModelProvider"})," is used for generating block models via ",(0,t.jsx)(d.code,{children:"ItemModelBuilder"})," in the ",(0,t.jsx)(d.code,{children:"item"})," folder. Most item models parent ",(0,t.jsx)(d.code,{children:"item/generated"})," and use ",(0,t.jsx)(d.code,{children:"layer0"})," to specify their texture, which can be done using ",(0,t.jsx)(d.code,{children:"#singleTexture"}),"."]}),"\n",(0,t.jsx)(d.admonition,{type:"note",children:(0,t.jsxs)(d.p,{children:[(0,t.jsx)(d.code,{children:"item/generated"})," can support five texture layers stacked on top of each other: ",(0,t.jsx)(d.code,{children:"layer0"}),", ",(0,t.jsx)(d.code,{children:"layer1"}),", ",(0,t.jsx)(d.code,{children:"layer2"}),", ",(0,t.jsx)(d.code,{children:"layer3"}),", and ",(0,t.jsx)(d.code,{children:"layer4"}),"."]})}),"\n",(0,t.jsx)(d.pre,{children:(0,t.jsx)(d.code,{className:"language-java",children:"// In some ItemModelProvider#registerModels\n\n// Will generate 'assets/<modid>/models/item/example_item.json'\n// Parent will be 'minecraft:item/generated'\n// For the texture key 'layer0'\n//  It will be at 'assets/<modid>/textures/item/example_item.png'\nthis.basicItem(EXAMPLE_ITEM.get());\n"})}),"\n",(0,t.jsx)(d.admonition,{type:"note",children:(0,t.jsx)(d.p,{children:"Item models for blocks should typically parent an existing block model instead of generating a separate model for an item."})}),"\n",(0,t.jsx)(d.h2,{id:"block-state-provider",children:"Block State Provider"}),"\n",(0,t.jsxs)(d.p,{children:["A ",(0,t.jsx)(d.code,{children:"BlockStateProvider"})," is responsible for generating ",(0,t.jsx)(d.a,{href:"https://minecraft.wiki/w/Tutorials/Models#Block_states",children:"block state JSONs"})," in ",(0,t.jsx)(d.code,{children:"blockstates"}),", block models in ",(0,t.jsx)(d.code,{children:"models/block"}),", and item models in ",(0,t.jsx)(d.code,{children:"models/item"})," for said blocks. The provider takes in the data generator, mod id, and existing file helper. Each ",(0,t.jsx)(d.code,{children:"BlockStateProvider"})," subclass must implement ",(0,t.jsx)(d.code,{children:"#registerStatesAndModels"}),"."]}),"\n",(0,t.jsx)(d.p,{children:"The provider contains basic methods for generating block state JSONs and block models. Item models must be generated separately as a block state JSON may define multiple models to use in different contexts. There are a number of common methods, however, that that the modder should be aware of when dealing with more complex tasks:"}),"\n",(0,t.jsxs)(d.table,{children:[(0,t.jsx)(d.thead,{children:(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.th,{style:{textAlign:"center"},children:"Method"}),(0,t.jsx)(d.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,t.jsxs)(d.tbody,{children:[(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{style:{textAlign:"center"},children:(0,t.jsx)(d.code,{children:"models"})}),(0,t.jsxs)(d.td,{style:{textAlign:"left"},children:["Gets the ",(0,t.jsx)(d.a,{href:"#blockmodelprovider",children:(0,t.jsx)(d.code,{children:"BlockModelProvider"})})," used to generate the item block models."]})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{style:{textAlign:"center"},children:(0,t.jsx)(d.code,{children:"itemModels"})}),(0,t.jsxs)(d.td,{style:{textAlign:"left"},children:["Gets the ",(0,t.jsx)(d.a,{href:"#itemmodelprovider",children:(0,t.jsx)(d.code,{children:"ItemModelProvider"})})," used to generate the item block models."]})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{style:{textAlign:"center"},children:(0,t.jsx)(d.code,{children:"modLoc"})}),(0,t.jsxs)(d.td,{style:{textAlign:"left"},children:["Creates a ",(0,t.jsx)(d.code,{children:"ResourceLocation"})," for the path in the given mod id's namespace."]})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{style:{textAlign:"center"},children:(0,t.jsx)(d.code,{children:"mcLoc"})}),(0,t.jsxs)(d.td,{style:{textAlign:"left"},children:["Creates a ",(0,t.jsx)(d.code,{children:"ResourceLocation"})," for the path in the ",(0,t.jsx)(d.code,{children:"minecraft"})," namespace."]})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{style:{textAlign:"center"},children:(0,t.jsx)(d.code,{children:"blockTexture"})}),(0,t.jsxs)(d.td,{style:{textAlign:"left"},children:["References a texture within ",(0,t.jsx)(d.code,{children:"textures/block"})," which has the same name as the block."]})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{style:{textAlign:"center"},children:(0,t.jsx)(d.code,{children:"simpleBlockItem"})}),(0,t.jsx)(d.td,{style:{textAlign:"left"},children:"Creates an item model for a block given the associated model file."})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{style:{textAlign:"center"},children:(0,t.jsx)(d.code,{children:"simpleBlockWithItem"})}),(0,t.jsx)(d.td,{style:{textAlign:"left"},children:"Creates a single block state for a block model and an item model using the block model as its parent."})]})]})]}),"\n",(0,t.jsxs)(d.p,{children:["A block state JSON is made up of variants or conditions. Each variant or condition references a ",(0,t.jsx)(d.code,{children:"ConfiguredModelList"}),": a list of ",(0,t.jsx)(d.code,{children:"ConfiguredModel"}),"s. Each configured model contains the model file (via ",(0,t.jsx)(d.code,{children:"ConfiguredModel$Builder#modelFile"}),"), the X and Y rotation in 90 degree intervals (via ",(0,t.jsx)(d.code,{children:"#rotationX"})," and ",(0,t.jsx)(d.code,{children:"rotationY"})," respectively), whether the texture can rotate when the model is rotated by the block state JSON (via ",(0,t.jsx)(d.code,{children:"#uvLock"}),"), and the weight of the model appearing compared to other models in the list (via ",(0,t.jsx)(d.code,{children:"#weight"}),")."]}),"\n",(0,t.jsxs)(d.p,{children:["The builder (",(0,t.jsx)(d.code,{children:"ConfiguredModel#builder"}),") can also create an array of ",(0,t.jsx)(d.code,{children:"ConfiguredModel"}),"s by creating the next model using ",(0,t.jsx)(d.code,{children:"#nextModel"})," and repeating the settings until ",(0,t.jsx)(d.code,{children:"#build"})," is called."]}),"\n",(0,t.jsx)(d.h3,{id:"variantblockstatebuilder",children:(0,t.jsx)(d.code,{children:"VariantBlockStateBuilder"})}),"\n",(0,t.jsxs)(d.p,{children:["Variants can be generated using ",(0,t.jsx)(d.code,{children:"BlockStateProvider#getVariantBuilder"}),". Each variant specifies a list of ",(0,t.jsx)(d.a,{href:"/Neoforge-Korean-Documentation/docs/blocks/states#%EB%B8%94%EB%A1%9D%EC%97%90-%EC%83%81%ED%83%9C-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0",children:"properties"})," (",(0,t.jsx)(d.code,{children:"PartialBlockstate"}),") which when matches a ",(0,t.jsx)(d.code,{children:"BlockState"})," in a level, will display a model chosen from the corresponding model list. An exception is thrown if there is a ",(0,t.jsx)(d.code,{children:"BlockState"})," which is not covered by any variant defined. Only one variant can be true for any ",(0,t.jsx)(d.code,{children:"BlockState"}),"."]}),"\n",(0,t.jsxs)(d.p,{children:["A ",(0,t.jsx)(d.code,{children:"PartialBlockstate"})," is typically defined using one of three methods:"]}),"\n",(0,t.jsxs)(d.table,{children:[(0,t.jsx)(d.thead,{children:(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.th,{style:{textAlign:"center"},children:"Method"}),(0,t.jsx)(d.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,t.jsxs)(d.tbody,{children:[(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{style:{textAlign:"center"},children:(0,t.jsx)(d.code,{children:"partialState"})}),(0,t.jsxs)(d.td,{style:{textAlign:"left"},children:["Creates a ",(0,t.jsx)(d.code,{children:"PartialBlockstate"})," to be defined."]})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{style:{textAlign:"center"},children:(0,t.jsx)(d.code,{children:"forAllStates"})}),(0,t.jsxs)(d.td,{style:{textAlign:"left"},children:["Defines a function where a given ",(0,t.jsx)(d.code,{children:"BlockState"})," can be represented by an array of ",(0,t.jsx)(d.code,{children:"ConfiguredModel"}),"s."]})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{style:{textAlign:"center"},children:(0,t.jsx)(d.code,{children:"forAllStatesExcept"})}),(0,t.jsxs)(d.td,{style:{textAlign:"left"},children:["Defines a function similar to ",(0,t.jsx)(d.code,{children:"#forAllStates"}),"; however, it also specifies which properties do not affect the models rendered."]})]})]})]}),"\n",(0,t.jsxs)(d.p,{children:["For a ",(0,t.jsx)(d.code,{children:"PartialBlockstate"}),", the properties defined can be specified (",(0,t.jsx)(d.code,{children:"#with"}),"). The configured models can be set (",(0,t.jsx)(d.code,{children:"#setModels"}),"), appended to the existing models (",(0,t.jsx)(d.code,{children:"#addModels"}),"), or built (",(0,t.jsx)(d.code,{children:"#modelForState"})," and then ",(0,t.jsx)(d.code,{children:"ConfiguredModel$Builder#addModel"})," once finished instead of ",(0,t.jsx)(d.code,{children:"#ConfiguredModel$Builder#build"}),")."]}),"\n",(0,t.jsx)(d.pre,{children:(0,t.jsx)(d.code,{className:"language-java",children:"// In some BlockStateProvider#registerStatesAndModels\n\n// EXAMPLE_BLOCK_1: Has Property BlockStateProperties#AXIS\nthis.getVariantBuilder(EXAMPLE_BLOCK_1) // Get variant builder\n  .partialState() // Construct partial state\n  .with(AXIS, Axis.Y) // When BlockState AXIS = Y\n    .modelForState() // Set models when AXIS = Y\n    .modelFile(yModelFile1) // Can show 'yModelFile1'\n    .nextModel() // Adds another model when AXIS = Y\n    .modelFile(yModelFile2) // Can show 'yModelFile2'\n    .weight(2) // Will show 'yModelFile2' 2/3 of the time\n    .addModel() // Finalizes models when AXIS = Y\n  .with(AXIS, Axis.Z) // When BlockState AXIS = Z\n    .modelForState() // Set models when AXIS = Z\n    .modelFile(hModelFile) // Can show 'hModelFile'\n    .addModel() // Finalizes models when AXIS = Z\n  .with(AXIS, Axis.X)  // When BlockState AXIS = X\n    .modelForState() // Set models when AXIS = X\n    .modelFile(hModelFile) // Can show 'hModelFile'\n    .rotationY(90) // Rotates 'hModelFile' 90 degrees on the Y axis\n    .addModel(); // Finalizes models when AXIS = X\n\n// EXAMPLE_BLOCK_2: Has Property BlockStateProperties#HORIZONTAL_FACING\nthis.getVariantBuilder(EXAMPLE_BLOCK_2) // Get variant builder\n  .forAllStates(state -> // For all possible states\n    ConfiguredModel.builder() // Creates configured model builder\n      .modelFile(modelFile) // Can show 'modelFile'\n      .rotationY((int) state.getValue(HORIZONTAL_FACING).toYRot()) // Rotates 'modelFile' on the Y axis depending on the property\n      .build() // Creates the array of configured models\n  );\n\n// EXAMPLE_BLOCK_3: Has Properties BlockStateProperties#HORIZONTAL_FACING, BlockStateProperties#WATERLOGGED\nthis.getVariantBuilder(EXAMPLE_BLOCK_3) // Get variant builder\n  .forAllStatesExcept(state -> // For all HORIZONTAL_FACING states\n    ConfiguredModel.builder() // Creates configured model builder\n      .modelFile(modelFile) // Can show 'modelFile'\n      .rotationY((int) state.getValue(HORIZONTAL_FACING).toYRot()) // Rotates 'modelFile' on the Y axis depending on the property\n      .build(), // Creates the array of configured models\n  WATERLOGGED); // Ignores WATERLOGGED property\n"})}),"\n",(0,t.jsx)(d.h3,{id:"multipartblockstatebuilder",children:(0,t.jsx)(d.code,{children:"MultiPartBlockStateBuilder"})}),"\n",(0,t.jsxs)(d.p,{children:["Multiparts can be generated using ",(0,t.jsx)(d.code,{children:"BlockStateProvider#getMultipartBuilder"}),". Each part (",(0,t.jsx)(d.code,{children:"MultiPartBlockStateBuilder#part"}),") specifies a group of conditions of properties which when matches a ",(0,t.jsx)(d.code,{children:"BlockState"})," in a level, will display a model from the model list. All condition groups that match the ",(0,t.jsx)(d.code,{children:"BlockState"})," will display their chosen model overlaid on each other."]}),"\n",(0,t.jsxs)(d.p,{children:["For any part (obtained via ",(0,t.jsx)(d.code,{children:"ConfiguredModel$Builder#addModel"}),"), a condition can be added (via ",(0,t.jsx)(d.code,{children:"#condition"}),") when a property is one of the specified values. Conditions must all succeed or, when ",(0,t.jsx)(d.code,{children:"#useOr"})," is set, at least one must succeed. Conditions can be grouped (via ",(0,t.jsx)(d.code,{children:"#nestedGroup"}),") as long as the current grouping only contains other groups and no single conditions. Groups of conditions can be left using ",(0,t.jsx)(d.code,{children:"#endNestedGroup"})," and a given part can be finished via ",(0,t.jsx)(d.code,{children:"#end"}),"."]}),"\n",(0,t.jsx)(d.pre,{children:(0,t.jsx)(d.code,{className:"language-java",children:"// In some BlockStateProvider#registerStatesAndModels\n\n// Redstone Wire\nthis.getMultipartBuilder(REDSTONE) // Get multipart builder\n  .part() // Create part\n    .modelFile(redstoneDot) // Can show 'redstoneDot'\n    .addModel() // 'redstoneDot' is displayed when...\n    .useOr() // At least one of these conditions are true\n    .nestedGroup() // true when all grouped conditions are true\n      .condition(WEST_REDSTONE, NONE) // true when WEST_REDSTONE is NONE\n      .condition(EAST_REDSTONE, NONE) // true when EAST_REDSTONE is NONE\n      .condition(SOUTH_REDSTONE, NONE) // true when SOUTH_REDSTONE is NONE\n      .condition(NORTH_REDSTONE, NONE) // true when NORTH_REDSTONE is NONE\n    .endNestedGroup() // End group\n    .nestedGroup() // true when all grouped conditions are true\n      .condition(EAST_REDSTONE, SIDE, UP) // true when EAST_REDSTONE is SIDE or UP\n      .condition(NORTH_REDSTONE, SIDE, UP) // true when NORTH_REDSTONE is SIDE or UP\n    .endNestedGroup() // End group\n    .nestedGroup() // true when all grouped conditions are true\n      .condition(EAST_REDSTONE, SIDE, UP) // true when EAST_REDSTONE is SIDE or UP\n      .condition(SOUTH_REDSTONE, SIDE, UP) // true when SOUTH_REDSTONE is SIDE or UP\n    .endNestedGroup() // End group\n    .nestedGroup() // true when all grouped conditions are true\n      .condition(WEST_REDSTONE, SIDE, UP) // true when WEST_REDSTONE is SIDE or UP\n      .condition(SOUTH_REDSTONE, SIDE, UP) // true when SOUTH_REDSTONE is SIDE or UP\n    .endNestedGroup() // End group\n    .nestedGroup() // true when all grouped conditions are true\n      .condition(WEST_REDSTONE, SIDE, UP) // true when WEST_REDSTONE is SIDE or UP\n      .condition(NORTH_REDSTONE, SIDE, UP) // true when NORTH_REDSTONE is SIDE or UP\n    .endNestedGroup() // End group\n    .end() // Finish part\n  .part() // Create part\n    .modelFile(redstoneSide0) // Can show 'redstoneSide0'\n    .addModel() // 'redstoneSide0' is displayed when...\n    .condition(NORTH_REDSTONE, SIDE, UP) // NORTH_REDSTONE is SIDE or UP\n    .end() // Finish part\n  .part() // Create part\n    .modelFile(redstoneSideAlt0) // Can show 'redstoneSideAlt0'\n    .addModel() // 'redstoneSideAlt0' is displayed when...\n    .condition(SOUTH_REDSTONE, SIDE, UP) // SOUTH_REDSTONE is SIDE or UP\n    .end() // Finish part\n  .part() // Create part\n    .modelFile(redstoneSideAlt1) // Can show 'redstoneSideAlt1'\n    .rotationY(270) // Rotates 'redstoneSideAlt1' 270 degrees on the Y axis\n    .addModel() // 'redstoneSideAlt1' is displayed when...\n    .condition(EAST_REDSTONE, SIDE, UP) // EAST_REDSTONE is SIDE or UP\n    .end() // Finish part\n  .part() // Create part\n    .modelFile(redstoneSide1) // Can show 'redstoneSide1'\n    .rotationY(270) // Rotates 'redstoneSide1' 270 degrees on the Y axis\n    .addModel() // 'redstoneSide1' is displayed when...\n    .condition(WEST_REDSTONE, SIDE, UP) // WEST_REDSTONE is SIDE or UP\n    .end() // Finish part\n  .part() // Create part\n    .modelFile(redstoneUp) // Can show 'redstoneUp'\n    .addModel() // 'redstoneUp' is displayed when...\n    .condition(NORTH_REDSTONE, UP) // NORTH_REDSTONE is UP\n    .end() // Finish part\n  .part() // Create part\n    .modelFile(redstoneUp) // Can show 'redstoneUp'\n    .rotationY(90) // Rotates 'redstoneUp' 90 degrees on the Y axis\n    .addModel() // 'redstoneUp' is displayed when...\n    .condition(EAST_REDSTONE, UP) // EAST_REDSTONE is UP\n    .end() // Finish part\n  .part() // Create part\n    .modelFile(redstoneUp) // Can show 'redstoneUp'\n    .rotationY(180) // Rotates 'redstoneUp' 180 degrees on the Y axis\n    .addModel() // 'redstoneUp' is displayed when...\n    .condition(SOUTH_REDSTONE, UP) // SOUTH_REDSTONE is UP\n    .end() // Finish part\n  .part() // Create part\n    .modelFile(redstoneUp) // Can show 'redstoneUp'\n    .rotationY(270) // Rotates 'redstoneUp' 270 degrees on the Y axis\n    .addModel() // 'redstoneUp' is displayed when...\n    .condition(WEST_REDSTONE, UP) // WEST_REDSTONE is UP\n    .end(); // Finish part\n"})}),"\n",(0,t.jsx)(d.h2,{id:"model-loader-builders",children:"Model Loader Builders"}),"\n",(0,t.jsxs)(d.p,{children:["Custom model loaders can also be generated for a given ",(0,t.jsx)(d.code,{children:"ModelBuilder"}),". Custom model loaders subclass ",(0,t.jsx)(d.code,{children:"CustomLoaderBuilder"})," and can be applied to a ",(0,t.jsx)(d.code,{children:"ModelBuilder"})," via ",(0,t.jsx)(d.code,{children:"#customLoader"}),". The factory method passed in creates a new loader builder to which configurations can be made. After all the changes have been finished, the custom loader can return back to the ",(0,t.jsx)(d.code,{children:"ModelBuilder"})," via ",(0,t.jsx)(d.code,{children:"CustomLoaderBuilder#end"}),"."]}),"\n",(0,t.jsxs)(d.table,{children:[(0,t.jsx)(d.thead,{children:(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.th,{style:{textAlign:"center"},children:"Model Builder"}),(0,t.jsx)(d.th,{style:{textAlign:"center"},children:"Factory Method"}),(0,t.jsx)(d.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,t.jsxs)(d.tbody,{children:[(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{style:{textAlign:"center"},children:(0,t.jsx)(d.code,{children:"DynamicFluidContainerModelBuilder"})}),(0,t.jsx)(d.td,{style:{textAlign:"center"},children:(0,t.jsx)(d.code,{children:"#begin"})}),(0,t.jsx)(d.td,{style:{textAlign:"left"},children:"Generates a bucket model for the specified fluid."})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{style:{textAlign:"center"},children:(0,t.jsx)(d.code,{children:"CompositeModelBuilder"})}),(0,t.jsx)(d.td,{style:{textAlign:"center"},children:(0,t.jsx)(d.code,{children:"#begin"})}),(0,t.jsx)(d.td,{style:{textAlign:"left"},children:"Generates a model composed of models."})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{style:{textAlign:"center"},children:(0,t.jsx)(d.code,{children:"ItemLayersModelBuilder"})}),(0,t.jsx)(d.td,{style:{textAlign:"center"},children:(0,t.jsx)(d.code,{children:"#begin"})}),(0,t.jsxs)(d.td,{style:{textAlign:"left"},children:["Generates a Forge implementation of an ",(0,t.jsx)(d.code,{children:"item/generated"})," model."]})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{style:{textAlign:"center"},children:(0,t.jsx)(d.code,{children:"SeparateTransformsModelBuilder"})}),(0,t.jsx)(d.td,{style:{textAlign:"center"},children:(0,t.jsx)(d.code,{children:"#begin"})}),(0,t.jsxs)(d.td,{style:{textAlign:"left"},children:["Generates a model which changes based on the specified ",(0,t.jsx)(d.a,{href:"/Neoforge-Korean-Documentation/docs/rendering/modelloaders/transform",children:"transform"}),"."]})]}),(0,t.jsxs)(d.tr,{children:[(0,t.jsx)(d.td,{style:{textAlign:"center"},children:(0,t.jsx)(d.code,{children:"ObjModelBuilder"})}),(0,t.jsx)(d.td,{style:{textAlign:"center"},children:(0,t.jsx)(d.code,{children:"#begin"})}),(0,t.jsxs)(d.td,{style:{textAlign:"left"},children:["Generates an ",(0,t.jsx)(d.a,{href:"/Neoforge-Korean-Documentation/docs/rendering/modelloaders/#wavefront-obj-models",children:"OBJ model"}),"."]})]})]})]}),"\n",(0,t.jsx)(d.pre,{children:(0,t.jsx)(d.code,{className:"language-java",children:'// For some BlockModelBuilder builder\nbuilder.customLoader(ObjModelBuilder::begin) // Custom loader \'forge:obj\'\n  .modelLocation(modLoc("models/block/model.obj")) // Set the OBJ model location\n  .flipV(true) // Flips the V coordinate in the supplied .mtl texture\n  .end() // Finish custom loader configuration\n.texture("particle", mcLoc("block/dirt")) // Set particle texture to dirt\n.texture("texture0", mcLoc("block/dirt")); // Set \'texture0\' texture to dirt\n'})}),"\n",(0,t.jsx)(d.h2,{id:"custom-model-loader-builders",children:"Custom Model Loader Builders"}),"\n",(0,t.jsxs)(d.p,{children:["Custom loader builders can be created by extending ",(0,t.jsx)(d.code,{children:"CustomLoaderBuilder"}),". The constructor can still have a ",(0,t.jsx)(d.code,{children:"protected"})," visibility with the ",(0,t.jsx)(d.code,{children:"ResourceLocation"})," hardcoded to the loader id registered via ",(0,t.jsx)(d.code,{children:"ModelEvent$RegisterGeometryLoaders#register"}),". The builder can then be initialized via a static factory method or the constructor if made ",(0,t.jsx)(d.code,{children:"public"}),"."]}),"\n",(0,t.jsx)(d.pre,{children:(0,t.jsx)(d.code,{className:"language-java",children:'public class ExampleLoaderBuilder<T extends ModelBuilder<T>> extends CustomLoaderBuilder<T> {\n  public static <T extends ModelBuilder<T>> ExampleLoaderBuilder<T> begin(T parent, ExistingFileHelper existingFileHelper) {\n    return new ExampleLoaderBuilder<>(parent, existingFileHelper);\n  }\n\n  protected ExampleLoaderBuilder(T parent, ExistingFileHelper existingFileHelper) {\n    super(new ResourceLocation(MOD_ID, "example_loader"), parent, existingFileHelper);\n  }\n}\n'})}),"\n",(0,t.jsx)(d.p,{children:"Afterwards, any configurations specified by the loader should be added as chainable methods."}),"\n",(0,t.jsx)(d.pre,{children:(0,t.jsx)(d.code,{className:"language-java",children:"// In ExampleLoaderBuilder\npublic ExampleLoaderBuilder<T> exampleInt(int example) {\n  // Set int\n  return this;\n}\n\npublic ExampleLoaderBuilder<T> exampleString(String example) {\n  // Set string\n  return this;\n}\n"})}),"\n",(0,t.jsxs)(d.p,{children:["If any additional configuration is specified, ",(0,t.jsx)(d.code,{children:"#toJson"})," should be overridden to write the additional properties."]}),"\n",(0,t.jsx)(d.pre,{children:(0,t.jsx)(d.code,{className:"language-java",children:"// In ExampleLoaderBuilder\n@Override\npublic JsonObject toJson(JsonObject json) {\n  json = super.toJson(json); // Handle base loader properties\n  // Encode custom loader properties\n  return json;\n}\n"})}),"\n",(0,t.jsx)(d.h2,{id:"custom-model-providers",children:"Custom Model Providers"}),"\n",(0,t.jsxs)(d.p,{children:["Custom model providers require a ",(0,t.jsx)(d.code,{children:"ModelBuilder"})," subclass, which defines the base of the model to generate, and a ",(0,t.jsx)(d.code,{children:"ModelProvider"})," subclass, which generates the models."]}),"\n",(0,t.jsxs)(d.p,{children:["The ",(0,t.jsx)(d.code,{children:"ModelBuilder"})," subclass contains any special properties to which can be applied specifically to those types of models (item models can have overrides). If any additional properties are added, ",(0,t.jsx)(d.code,{children:"#toJson"})," needs to be overridden to write the additional information."]}),"\n",(0,t.jsx)(d.pre,{children:(0,t.jsx)(d.code,{className:"language-java",children:"public class ExampleModelBuilder extends ModelBuilder<ExampleModelBuilder> {\n  // ...\n}\n"})}),"\n",(0,t.jsxs)(d.p,{children:["The ",(0,t.jsx)(d.code,{children:"ModelProvider"})," subclass requires no special logic. The constructor should hardcode the subdirectory within the ",(0,t.jsx)(d.code,{children:"models"})," folder and the ",(0,t.jsx)(d.code,{children:"ModelBuilder"})," to represent the to-be-generated models."]}),"\n",(0,t.jsx)(d.pre,{children:(0,t.jsx)(d.code,{className:"language-java",children:"public class ExampleModelProvider extends ModelProvider<ExampleModelBuilder> {\n\n  public ExampleModelProvider(PackOutput output, String modid, ExistingFileHelper existingFileHelper) {\n    // Models will be generated to 'assets/<modid>/models/example' if no 'modid' is specified in '#getBuilder'\n    super(output, modid, \"example\", ExampleModelBuilder::new, existingFileHelper);\n  }\n}\n"})}),"\n",(0,t.jsx)(d.h2,{id:"custom-model-consumers",children:"Custom Model Consumers"}),"\n",(0,t.jsxs)(d.p,{children:["Custom model consumers like ",(0,t.jsx)(d.a,{href:"#block-state-provider",children:(0,t.jsx)(d.code,{children:"BlockStateProvider"})})," can be created by manually generating the models themselves. The ",(0,t.jsx)(d.code,{children:"ModelProvider"})," subclass used to generate the models should be specified and made available."]}),"\n",(0,t.jsx)(d.pre,{children:(0,t.jsx)(d.code,{className:"language-java",children:"public class ExampleModelConsumerProvider implements IDataProvider {\n\n  public ExampleModelConsumerProvider(PackOutput output, String modid, ExistingFileHelper existingFileHelper) {\n    this.example = new ExampleModelProvider(output, modid, existingFileHelper);\n  }\n}\n"})}),"\n",(0,t.jsxs)(d.p,{children:["Once the data provider is running, the models within the ",(0,t.jsx)(d.code,{children:"ModelProvider"})," subclass can be generated using ",(0,t.jsx)(d.code,{children:"ModelProvider#generateAll"}),"."]}),"\n",(0,t.jsx)(d.pre,{children:(0,t.jsx)(d.code,{className:"language-java",children:"// In ExampleModelConsumerProvider\n@Override\npublic CompletableFuture<?> run(CachedOutput cache) {\n  // Populate the model provider\n  CompletableFuture<?> exampleFutures = this.example.generateAll(cache); // Generate the models\n\n  // Run logic and create CompletableFuture(s) for writing files\n  // ...\n\n  // Assume we have a new CompletableFuture providerFuture\n  return CompletableFuture.allOf(exampleFutures, providerFuture);\n}\n"})})]})}function h(e={}){const{wrapper:d}={...(0,o.a)(),...e.components};return d?(0,t.jsx)(d,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},1151:(e,d,n)=>{n.d(d,{Z:()=>l,a:()=>r});var t=n(7294);const o={},i=t.createContext(o);function r(e){const d=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(d):{...d,...e}}),[d,e])}function l(e){let d;return d=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),t.createElement(i.Provider,{value:d},e.children)}}}]);