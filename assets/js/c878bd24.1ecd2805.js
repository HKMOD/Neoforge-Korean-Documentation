"use strict";(self.webpackChunkneoforged_docs=self.webpackChunkneoforged_docs||[]).push([[753],{5188:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>r,contentTitle:()=>s,default:()=>h,frontMatter:()=>d,metadata:()=>i,toc:()=>c});var n=t(5893),o=t(1151);const d={},s="Saved Data",i={id:"datastorage/saveddata",title:"Saved Data",description:"The Saved Data (SD) system can be used to save additional data on levels.",source:"@site/versioned_docs/version-1.20.4/datastorage/saveddata.md",sourceDirName:"datastorage",slug:"/datastorage/saveddata",permalink:"/Neoforge-Korean-Documentation/docs/1.20.4/datastorage/saveddata",draft:!1,unlisted:!1,tags:[],version:"1.20.4",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Named Binary Tag (NBT)",permalink:"/Neoforge-Korean-Documentation/docs/1.20.4/datastorage/nbt"},next:{title:"Menus",permalink:"/Neoforge-Korean-Documentation/docs/1.20.4/gui/menus"}},r={},c=[{value:"Declaration",id:"declaration",level:2},{value:"Attaching to a Level",id:"attaching-to-a-level",level:2}];function l(e){const a={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(a.h1,{id:"saved-data",children:"Saved Data"}),"\n",(0,n.jsx)(a.p,{children:"The Saved Data (SD) system can be used to save additional data on levels."}),"\n",(0,n.jsx)(a.p,{children:(0,n.jsxs)(a.em,{children:["If the data is specific to some block entities, chunks, or entities, consider using a ",(0,n.jsx)(a.a,{href:"attachments",children:"data attachment"})," instead."]})}),"\n",(0,n.jsx)(a.h2,{id:"declaration",children:"Declaration"}),"\n",(0,n.jsxs)(a.p,{children:["Each SD implementation must subtype the ",(0,n.jsx)(a.code,{children:"SavedData"})," class. There are two important methods to be aware of:"]}),"\n",(0,n.jsxs)(a.ul,{children:["\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.code,{children:"save"}),": Allows the implementation to write NBT data to the level."]}),"\n",(0,n.jsxs)(a.li,{children:[(0,n.jsx)(a.code,{children:"setDirty"}),": A method that must be called after changing the data, to notify the game that there are changes that need to be written. If not called, ",(0,n.jsx)(a.code,{children:"#save"})," will not get called and the original data will remain unchanged."]}),"\n"]}),"\n",(0,n.jsx)(a.h2,{id:"attaching-to-a-level",children:"Attaching to a Level"}),"\n",(0,n.jsxs)(a.p,{children:["Any ",(0,n.jsx)(a.code,{children:"SavedData"})," is loaded and/or attached to a level dynamically. As such, if one is never created on a level, then it will not exist."]}),"\n",(0,n.jsxs)(a.p,{children:[(0,n.jsx)(a.code,{children:"SavedData"}),"s are created and loaded from the ",(0,n.jsx)(a.code,{children:"DimensionDataStorage"}),", which can be accessed by calling either ",(0,n.jsx)(a.code,{children:"ServerChunkCache#getDataStorage"})," or ",(0,n.jsx)(a.code,{children:"ServerLevel#getDataStorage"}),". From there, you can get or create an instance of your SD by calling ",(0,n.jsx)(a.code,{children:"DimensionDataStorage#computeIfAbsent"}),". This will attempt to get the current instance of the SD if present or create a new one and load all available data."]}),"\n",(0,n.jsxs)(a.p,{children:[(0,n.jsx)(a.code,{children:"DimensionDataStorage#computeIfAbsent"})," takes in two arguments. The first is an instance of ",(0,n.jsx)(a.code,{children:"SavedData.Factory"}),", which consists of a supplier to construct a new instance of the SD and a function to load NBT data into a SD and return it. The second argument is the name of the ",(0,n.jsx)(a.code,{children:".dat"})," file stored within the ",(0,n.jsx)(a.code,{children:"data"})," folder for the implemented level. The name must be a valid filename and can not contain ",(0,n.jsx)(a.code,{children:"/"})," or ",(0,n.jsx)(a.code,{children:"\\"}),"."]}),"\n",(0,n.jsxs)(a.p,{children:['For example, if a SD was named "example" within the Nether, then a file would be created at ',(0,n.jsx)(a.code,{children:"./<level_folder>/DIM-1/data/example.dat"})," and would be implemented like so:"]}),"\n",(0,n.jsx)(a.pre,{children:(0,n.jsx)(a.code,{className:"language-java",children:'// In some class\npublic ExampleSavedData create() {\n  return new ExampleSavedData();\n}\n\npublic ExampleSavedData load(CompoundTag tag) {\n  ExampleSavedData data = this.create();\n  // Load saved data\n  return data;\n}\n\n// In some method within the class\nnetherDataStorage.computeIfAbsent(new Factory<>(this::create, this::load), "example");\n'})}),"\n",(0,n.jsxs)(a.p,{children:["If a SD is not specific to a level, the SD should be attached to the Overworld, which can be obtained from ",(0,n.jsx)(a.code,{children:"MinecraftServer#overworld"}),". The Overworld is the only dimension that is never fully unloaded and as such makes it perfect to store multi-level data on."]})]})}function h(e={}){const{wrapper:a}={...(0,o.a)(),...e.components};return a?(0,n.jsx)(a,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},1151:(e,a,t)=>{t.d(a,{Z:()=>i,a:()=>s});var n=t(7294);const o={},d=n.createContext(o);function s(e){const a=n.useContext(d);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function i(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),n.createElement(d.Provider,{value:a},e.children)}}}]);