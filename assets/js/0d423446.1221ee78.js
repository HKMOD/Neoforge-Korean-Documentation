"use strict";(self.webpackChunkneoforged_docs=self.webpackChunkneoforged_docs||[]).push([[6926],{7816:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>t,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>c});var a=i(5893),r=i(1151);const s={},o="Jar-in-Jar",d={id:"docs/dependencies/jarinjar",title:"Jar-in-Jar",description:"Jar-in-Jar is a way to load dependencies for mods from within the jars of the mods. To accomplish this, Jar-in-Jar generates a metadata json within META-INF/jarjar/metadata.json on build containing the artifacts to load from within the jar.",source:"@site/neogradle/docs/dependencies/jarinjar.md",sourceDirName:"docs/dependencies",slug:"/docs/dependencies/jarinjar",permalink:"/Neoforge-Korean-Documentation/neogradle/docs/dependencies/jarinjar",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"ngSidebar",previous:{title:"Dependencies",permalink:"/Neoforge-Korean-Documentation/neogradle/docs/dependencies/"},next:{title:"Getting Started with ForgeGradle",permalink:"/Neoforge-Korean-Documentation/neogradle/docs/gettingstarted/"}},t={},c=[{value:"Adding Dependencies",id:"adding-dependencies",level:2},{value:"Using Runtime Dependencies",id:"using-runtime-dependencies",level:3},{value:"Publishing a Jar-in-Jar to Maven",id:"publishing-a-jar-in-jar-to-maven",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,r.a)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"jar-in-jar",children:"Jar-in-Jar"}),"\n",(0,a.jsxs)(n.p,{children:["Jar-in-Jar is a way to load dependencies for mods from within the jars of the mods. To accomplish this, Jar-in-Jar generates a metadata json within ",(0,a.jsx)(n.code,{children:"META-INF/jarjar/metadata.json"})," on build containing the artifacts to load from within the jar."]}),"\n",(0,a.jsxs)(n.p,{children:["Jar-in-Jar is a completely optional system which can be enabled using ",(0,a.jsx)(n.code,{children:"jarJar#enable"})," before the ",(0,a.jsx)(n.code,{children:"minecraft"})," block. This will include all dependencies from the ",(0,a.jsx)(n.code,{children:"jarJar"})," configuration into the ",(0,a.jsx)(n.code,{children:"jarJar"})," task. You can configure the task similarly to other jar tasks:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-gradle",children:"// In build.gradle\n\n// Enable the Jar-in-Jar system for your mod\njarJar.enable()\n\n\n// Configure the 'jarJar' task\n// 'all' is the default classifier\ntasks.named('jarJar') {\n    // ...\n}\n"})}),"\n",(0,a.jsx)(n.h2,{id:"adding-dependencies",children:"Adding Dependencies"}),"\n",(0,a.jsxs)(n.p,{children:["You can add dependencies to be included inside your jar using the ",(0,a.jsx)(n.code,{children:"jarJar"})," configuration. As Jar-in-Jar is a negotiation system, all versions should supply a supported range."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-gradle",children:"// In build.gradle\ndependencies {\n    // Compiles against and includes the highest supported version of examplelib\n    //   between 2.0 (inclusive) and 3.0 (exclusive)\n    jarJar(group: 'com.example', name: 'examplelib', version: '[2.0,3.0)')\n}\n"})}),"\n",(0,a.jsxs)(n.p,{children:["If you need to specify an exact version to include rather than the highest supported version in the range, you can use ",(0,a.jsx)(n.code,{children:"jarJar#pin"})," within the dependency closure. In these instances, the artifact version will be used during compile time while the pinned version will be bundled inside the mod jar."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-gradle",children:"// In build.gradle\ndependencies {\n    // Compiles against the highest supported version of examplelib\n    //   between 2.0 (inclusive) and 3.0 (exclusive)\n    jarJar(group: 'com.example', name: 'examplelib', version: '[2.0,3.0)') {\n      // Includes examplelib 2.8.0\n      jarJar.pin(it, '2.8.0')\n    }\n}\n"})}),"\n",(0,a.jsx)(n.p,{children:"You can additionally pin a version range while compiling against a specific version instead:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-gradle",children:"// In build.gradle\ndependencies {\n    // Compiles against examplelib 2.8.0\n    jarJar(group: 'com.example', name: 'examplelib', version: '2.8.0') {\n      // Includes the highest supported version of examplelib\n      //   between 2.0 (inclusive) and 3.0 (exclusive)\n      jarJar.pin(it, '[2.0,3.0)')\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"using-runtime-dependencies",children:"Using Runtime Dependencies"}),"\n",(0,a.jsxs)(n.p,{children:["If you would like to include the runtime dependencies of your mod inside your jar, you can invoke ",(0,a.jsx)(n.code,{children:"jarJar#fromRuntimeConfiguration"})," within your buildscript. If you decide to use this option, it is highly suggested to include dependency filters; otherwise, every single dependency -- including Minecraft and Forge -- will be bundled in the jar as well. To support more flexible statements, the ",(0,a.jsx)(n.code,{children:"dependency"})," configuration has been added to the ",(0,a.jsx)(n.code,{children:"jarJar"})," extension and task. Using this, you can specify patterns to include or exclude from the configuration:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-gradle",children:"// In build.gradle\n\n// Add runtime dependencies to jar\njarJar.fromRuntimeConfiguration()\n\n// ...\n\njarJar {\n    // Include or exclude dependencies here from runtime configuration\n    dependencies {\n        // Exclude any dependency which begins with 'com.google.gson.'\n        exclude(dependency('com.google.gson.*'))\n    }\n}\n"})}),"\n",(0,a.jsx)(n.admonition,{type:"tip",children:(0,a.jsxs)(n.p,{children:["It is generally recommended to set at least one ",(0,a.jsx)(n.code,{children:"include"})," filter when using ",(0,a.jsx)(n.code,{children:"#fromRuntimeConfiguration"}),"."]})}),"\n",(0,a.jsx)(n.h2,{id:"publishing-a-jar-in-jar-to-maven",children:"Publishing a Jar-in-Jar to Maven"}),"\n",(0,a.jsxs)(n.p,{children:["For archival reasons, ForgeGradle supports publishing Jar-in-Jar artifacts to a maven of choice, similar to how the ",(0,a.jsx)(n.a,{href:"https://imperceptiblethoughts.com/shadow/getting-started/",children:"Shadow plugin"})," handles it. In practices, this is not useful or recommended."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-gradle",children:"// In build.gradle (has 'maven-publish' plugin)\n\npublications {\n    mavenJava(MavenPublication) {\n        // Add standard java components and Jar-in-Jar artifact\n        from components.java\n        jarJar.component(it)\n\n        // ...\n    }\n}\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>d,a:()=>o});var a=i(7294);const r={},s=a.createContext(r);function o(e){const n=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),a.createElement(s.Provider,{value:n},e.children)}}}]);