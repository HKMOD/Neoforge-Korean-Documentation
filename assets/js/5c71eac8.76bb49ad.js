"use strict";(self.webpackChunkneoforged_docs=self.webpackChunkneoforged_docs||[]).push([[4739],{3905:(e,t,r)=>{r.d(t,{Zo:()=>s,kt:()=>u});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var d=n.createContext({}),c=function(e){var t=n.useContext(d),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=c(e.components);return n.createElement(d.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,d=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=c(r),f=o,u=p["".concat(d,".").concat(f)]||p[f]||m[f]||a;return r?n.createElement(u,i(i({ref:t},s),{},{components:r})):n.createElement(u,i({ref:t},s))}));function u(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=f;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},9274:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var n=r(7462),o=(r(7294),r(3905));const a={},i="Global Loot Modifier Generation",l={unversionedId:"datagen/server/glm",id:"datagen/server/glm",title:"Global Loot Modifier Generation",description:"Global Loot Modifiers (GLMs) can be generated for a mod by subclassing GlobalLootModifierProvider and implementing #start. Each GLM can be added generated by calling #add and specifying the name of the modifier and the modifier instance to be serialized. After implementation, the provider must be added to the DataGenerator.",source:"@site/docs/datagen/server/glm.md",sourceDirName:"datagen/server",slug:"/datagen/server/glm",permalink:"/Neoforge-Korean-Documentation/docs/datagen/server/glm",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Datapack Registry Object Generation",permalink:"/Neoforge-Korean-Documentation/docs/datagen/server/datapackregistries"},next:{title:"Loot Table Generation",permalink:"/Neoforge-Korean-Documentation/docs/datagen/server/loottables"}},d={},c=[],s={toc:c},p="wrapper";function m(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"global-loot-modifier-generation"},"Global Loot Modifier Generation"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/Neoforge-Korean-Documentation/docs/resources/server/glm"},"Global Loot Modifiers (GLMs)")," can be generated for a mod by subclassing ",(0,o.kt)("inlineCode",{parentName:"p"},"GlobalLootModifierProvider")," and implementing ",(0,o.kt)("inlineCode",{parentName:"p"},"#start"),". Each GLM can be added generated by calling ",(0,o.kt)("inlineCode",{parentName:"p"},"#add")," and specifying the name of the modifier and the ",(0,o.kt)("a",{parentName:"p",href:"/Neoforge-Korean-Documentation/docs/resources/server/glm#igloballootmodifier"},"modifier instance")," to be serialized. After implementation, the provider must be ",(0,o.kt)("a",{parentName:"p",href:"/Neoforge-Korean-Documentation/docs/datagen/#data-providers"},"added")," to the ",(0,o.kt)("inlineCode",{parentName:"p"},"DataGenerator"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'// On the MOD event bus\n@SubscribeEvent\npublic void gatherData(GatherDataEvent event) {\n    event.getGenerator().addProvider(\n        // Tell generator to run only when server data are generating\n        event.includeServer(),\n        output -> new MyGlobalLootModifierProvider(output, MOD_ID)\n    );\n}\n\n// In some GlobalLootModifierProvider#start\nthis.add("example_modifier", new ExampleModifier(\n  new LootItemCondition[] {\n    WeatherCheck.weather().setRaining(true).build() // Executes when raining\n  },\n  "val1",\n  10,\n  Items.DIRT\n));\n')))}m.isMDXComponent=!0}}]);