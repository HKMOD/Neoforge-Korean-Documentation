"use strict";(self.webpackChunkneoforged_docs=self.webpackChunkneoforged_docs||[]).push([[563],{2917:(e,o,t)=>{t.r(o),t.d(o,{assets:()=>l,contentTitle:()=>r,default:()=>m,frontMatter:()=>d,metadata:()=>i,toc:()=>s});var n=t(5893),a=t(1151);const d={},r="Custom Model Loaders",i={id:"rendering/modelloaders/index",title:"Custom Model Loaders",description:"A \"model\" is simply a shape. It can be a simple cube, it can be several cubes, it can be a truncated icosidodecahedron, or anything in between. Most models you'll see will be in the vanilla JSON format. Models in other formats are loaded into IUnbakedGeometrys by an IGeometryLoader at runtime. Forge provides default implementations for WaveFront OBJ files, buckets, composite models, models in different render layers, and a reimplementation of Vanilla's builtin/generated item model. Most things do not care about what loaded the model or what format it's in as they are all eventually represented by an BakedModel in code.",source:"@site/docs/rendering/modelloaders/index.md",sourceDirName:"rendering/modelloaders",slug:"/rendering/modelloaders/",permalink:"/Neoforge-Korean-Documentation/docs/rendering/modelloaders/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Part Visibility",permalink:"/Neoforge-Korean-Documentation/docs/rendering/modelextensions/visibility"},next:{title:"BakedModel",permalink:"/Neoforge-Korean-Documentation/docs/rendering/modelloaders/bakedmodel"}},l={},s=[{value:"WaveFront OBJ Models",id:"wavefront-obj-models",level:2}];function c(e){const o={admonition:"admonition",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(o.h1,{id:"custom-model-loaders",children:"Custom Model Loaders"}),"\n",(0,n.jsxs)(o.p,{children:['A "model" is simply a shape. It can be a simple cube, it can be several cubes, it can be a truncated icosidodecahedron, or anything in between. Most models you\'ll see will be in the vanilla JSON format. Models in other formats are loaded into ',(0,n.jsx)(o.code,{children:"IUnbakedGeometry"}),"s by an ",(0,n.jsx)(o.code,{children:"IGeometryLoader"})," at runtime. Forge provides default implementations for WaveFront OBJ files, buckets, composite models, models in different render layers, and a reimplementation of Vanilla's ",(0,n.jsx)(o.code,{children:"builtin/generated"})," item model. Most things do not care about what loaded the model or what format it's in as they are all eventually represented by an ",(0,n.jsx)(o.code,{children:"BakedModel"})," in code."]}),"\n",(0,n.jsx)(o.admonition,{type:"caution",children:(0,n.jsxs)(o.p,{children:["Specifying a custom model loader through the top-level ",(0,n.jsx)(o.code,{children:"loader"})," entry in a model JSON will cause the ",(0,n.jsx)(o.code,{children:"elements"})," entry to be ignored unless it is consumed by the custom loader. All other vanilla entries will still be loaded and available in the unbaked ",(0,n.jsx)(o.code,{children:"BlockModel"})," representation and may be consumed outside of the custom loader."]})}),"\n",(0,n.jsx)(o.h2,{id:"wavefront-obj-models",children:"WaveFront OBJ Models"}),"\n",(0,n.jsxs)(o.p,{children:["Forge adds a loader for the ",(0,n.jsx)(o.code,{children:".obj"})," file format. To use these models, the JSON must reference the ",(0,n.jsx)(o.code,{children:"forge:obj"})," loader. This loader accepts any model location that is in a registered namespace and whose path ends in ",(0,n.jsx)(o.code,{children:".obj"}),". The ",(0,n.jsx)(o.code,{children:".mtl"})," file should be placed in the same location with the same name as the ",(0,n.jsx)(o.code,{children:".obj"})," to be used automatically. The ",(0,n.jsx)(o.code,{children:".mtl"})," file will probably have to be manually edited to change the paths pointing to textures defined within the JSON. Additionally, the V axis for textures may be flipped depending on the external program that created the model (i.e. V = 0 may be the bottom edge, not the top). This may be rectified in the modelling program itself or done in the model JSON like so:"]}),"\n",(0,n.jsx)(o.pre,{children:(0,n.jsx)(o.code,{className:"language-js",children:'{\n  // Add the following line on the same level as a \'model\' declaration\n  "loader": "forge:obj",\n  "flip_v": true,\n  "model": "examplemod:models/block/model.obj",\n  "textures": {\n    // Can refer to in .mtl using #texture0\n    "texture0": "minecraft:block/dirt",\n    "particle": "minecraft:block/dirt"\n  }\n}\n'})})]})}function m(e={}){const{wrapper:o}={...(0,a.a)(),...e.components};return o?(0,n.jsx)(o,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},1151:(e,o,t)=>{t.d(o,{Z:()=>i,a:()=>r});var n=t(7294);const a={},d=n.createContext(a);function r(e){const o=n.useContext(d);return n.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function i(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),n.createElement(d.Provider,{value:o},e.children)}}}]);