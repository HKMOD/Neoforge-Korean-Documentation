"use strict";(self.webpackChunkneoforged_docs=self.webpackChunkneoforged_docs||[]).push([[1712],{3830:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>r,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>d,toc:()=>c});var t=i(5893),s=i(1151);const l={},o="Configuration",d={id:"misc/config",title:"Configuration",description:"Configurations define settings and consumer preferences that can be applied to a mod instance. NeoForge uses a configuration system using TOML files and read with NightConfig.",source:"@site/versioned_docs/version-1.20.4/misc/config.md",sourceDirName:"misc",slug:"/misc/config",permalink:"/Neoforge-Korean-Documentation/docs/1.20.4/misc/config",draft:!1,unlisted:!1,tags:[],version:"1.20.4",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Porting to Minecraft 1.20",permalink:"/Neoforge-Korean-Documentation/docs/1.20.4/legacy/porting"},next:{title:"Debug Profiler",permalink:"/Neoforge-Korean-Documentation/docs/1.20.4/misc/debugprofiler"}},r={},c=[{value:"Creating a Configuration",id:"creating-a-configuration",level:2},{value:"ConfigValue",id:"configvalue",level:3},{value:"Additional Config Value Types",id:"additional-config-value-types",level:4},{value:"Registering a Configuration",id:"registering-a-configuration",level:2},{value:"Configuration Events",id:"configuration-events",level:2}];function a(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"configuration",children:"Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["Configurations define settings and consumer preferences that can be applied to a mod instance. NeoForge uses a configuration system using ",(0,t.jsx)(n.a,{href:"https://toml.io/",children:"TOML"})," files and read with ",(0,t.jsx)(n.a,{href:"https://github.com/TheElectronWill/night-config",children:"NightConfig"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"creating-a-configuration",children:"Creating a Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["A configuration can be created using a subtype of ",(0,t.jsx)(n.code,{children:"IConfigSpec"}),". NeoForge implements the type via ",(0,t.jsx)(n.code,{children:"ModConfigSpec"})," and enables its construction through ",(0,t.jsx)(n.code,{children:"ModConfigSpec.Builder"}),". The builder can separate the config values into sections via ",(0,t.jsx)(n.code,{children:"Builder#push"})," to create a section and ",(0,t.jsx)(n.code,{children:"Builder#pop"})," to leave a section. Afterwards, the configuration can be built using one of two methods:"]}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{style:{textAlign:"left"},children:"Method"}),(0,t.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{style:{textAlign:"left"},children:(0,t.jsx)(n.code,{children:"build"})}),(0,t.jsxs)(n.td,{style:{textAlign:"left"},children:["Creates the ",(0,t.jsx)(n.code,{children:"ModConfigSpec"}),"."]})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{style:{textAlign:"left"},children:(0,t.jsx)(n.code,{children:"configure"})}),(0,t.jsxs)(n.td,{style:{textAlign:"left"},children:["Creates a pair of the class holding the config values and the ",(0,t.jsx)(n.code,{children:"ModConfigSpec"}),"."]})]})]})]}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"ModConfigSpec.Builder#configure"})," is typically used with a ",(0,t.jsx)(n.code,{children:"static"})," block and a class that takes in ",(0,t.jsx)(n.code,{children:"ModConfigSpec.Builder"})," as part of its constructor to attach and hold the values:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// In some config class\nExampleConfig(ModConfigSpec.Builder builder) {\n  // Define values here in final fields\n}\n\n// Somewhere the constructor is accessible\nstatic {\n  Pair<ExampleConfig, ModConfigSpec> pair = new ModConfigSpec.Builder()\n    .configure(ExampleConfig::new);\n  // Store pair values in some constant field\n}\n"})})]}),"\n",(0,t.jsx)(n.p,{children:"Each config value can be supplied with additional context to provide additional behavior. Contexts must be defined before the config value is fully built:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{style:{textAlign:"left"},children:"Method"}),(0,t.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{style:{textAlign:"left"},children:(0,t.jsx)(n.code,{children:"comment"})}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Provides a description of what the config value does. Can provide multiple strings for a multiline comment."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{style:{textAlign:"left"},children:(0,t.jsx)(n.code,{children:"translation"})}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"Provides a translation key for the name of the config value."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{style:{textAlign:"left"},children:(0,t.jsx)(n.code,{children:"worldRestart"})}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:"The world must be restarted before the config value can be changed."})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"configvalue",children:"ConfigValue"}),"\n",(0,t.jsxs)(n.p,{children:["Config values can be built with the provided contexts (if defined) using any of the ",(0,t.jsx)(n.code,{children:"#define"})," methods."]}),"\n",(0,t.jsx)(n.p,{children:"All config value methods take in at least two components:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["A path representing the name of the variable: a ",(0,t.jsx)(n.code,{children:"."})," separated string representing the sections the config value is in"]}),"\n",(0,t.jsx)(n.li,{children:"The default value when no valid configuration is present"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"ConfigValue"})," specific methods take in two additional components:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"A validator to make sure the deserialized object is valid"}),"\n",(0,t.jsx)(n.li,{children:"A class representing the data type of the config value"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// For some ModConfigSpec.Builder builder\nConfigValue<T> value = builder.comment("Comment")\n  .define("config_value_name", defaultValue);\n'})}),"\n",(0,t.jsxs)(n.p,{children:["The values themselves can be obtained using ",(0,t.jsx)(n.code,{children:"ConfigValue#get"}),". The values are additionally cached to prevent multiple readings from files."]}),"\n",(0,t.jsx)(n.h4,{id:"additional-config-value-types",children:"Additional Config Value Types"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Range Values"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Description: Value must be between the defined bounds"}),"\n",(0,t.jsxs)(n.li,{children:["Class Type: ",(0,t.jsx)(n.code,{children:"Comparable<T>"})]}),"\n",(0,t.jsxs)(n.li,{children:["Method Name: ",(0,t.jsx)(n.code,{children:"#defineInRange"})]}),"\n",(0,t.jsxs)(n.li,{children:["Additional Components:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The minimum and maximum the config value may be"}),"\n",(0,t.jsx)(n.li,{children:"A class representing the data type of the config value"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"DoubleValue"}),"s, ",(0,t.jsx)(n.code,{children:"IntValue"}),"s, and ",(0,t.jsx)(n.code,{children:"LongValue"}),"s are range values which specify the class as ",(0,t.jsx)(n.code,{children:"Double"}),", ",(0,t.jsx)(n.code,{children:"Integer"}),", and ",(0,t.jsx)(n.code,{children:"Long"})," respectively."]})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Whitelisted Values"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Description: Value must be in supplied collection"}),"\n",(0,t.jsxs)(n.li,{children:["Class Type: ",(0,t.jsx)(n.code,{children:"T"})]}),"\n",(0,t.jsxs)(n.li,{children:["Method Name: ",(0,t.jsx)(n.code,{children:"#defineInList"})]}),"\n",(0,t.jsxs)(n.li,{children:["Additional Components:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"A collection of the allowed values the configuration can be"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"List Values"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Description: Value is a list of entries"}),"\n",(0,t.jsxs)(n.li,{children:["Class Type: ",(0,t.jsx)(n.code,{children:"List<T>"})]}),"\n",(0,t.jsxs)(n.li,{children:["Method Name: ",(0,t.jsx)(n.code,{children:"#defineList"}),", ",(0,t.jsx)(n.code,{children:"#defineListAllowEmpty"})," if list can be empty"]}),"\n",(0,t.jsxs)(n.li,{children:["Additional Components:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"A validator to make sure a deserialized element from the list is valid"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Enum Values"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Description: An enum value in the supplied collection"}),"\n",(0,t.jsxs)(n.li,{children:["Class Type: ",(0,t.jsx)(n.code,{children:"Enum<T>"})]}),"\n",(0,t.jsxs)(n.li,{children:["Method Name: ",(0,t.jsx)(n.code,{children:"#defineEnum"})]}),"\n",(0,t.jsxs)(n.li,{children:["Additional Components:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"A getter to convert a string or integer into an enum"}),"\n",(0,t.jsx)(n.li,{children:"A collection of the allowed values the configuration can be"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Boolean Values"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Description: A ",(0,t.jsx)(n.code,{children:"boolean"})," value"]}),"\n",(0,t.jsxs)(n.li,{children:["Class Type: ",(0,t.jsx)(n.code,{children:"Boolean"})]}),"\n",(0,t.jsxs)(n.li,{children:["Method Name: ",(0,t.jsx)(n.code,{children:"#define"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"registering-a-configuration",children:"Registering a Configuration"}),"\n",(0,t.jsxs)(n.p,{children:["Once a ",(0,t.jsx)(n.code,{children:"ModConfigSpec"})," has been built, it must be registered to allow NeoForge to load, track, and sync the configuration settings as required. Configurations should be registered in the mod constructor via ",(0,t.jsx)(n.code,{children:"ModLoadingContext#registerConfig"}),". A configuration can be registered with a given type representing the side the config belongs to, the ",(0,t.jsx)(n.code,{children:"ModConfigSpec"}),", and optionally a specific file name for the configuration."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// In the mod constructor with a ModConfigSpec CONFIG\nModLoadingContext.get().registerConfig(Type.COMMON, CONFIG);\n"})}),"\n",(0,t.jsx)(n.p,{children:"Here is a list of the available configuration types:"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{style:{textAlign:"center"},children:"Type"}),(0,t.jsx)(n.th,{style:{textAlign:"center"},children:"Loaded"}),(0,t.jsx)(n.th,{style:{textAlign:"center"},children:"Synced to Client"}),(0,t.jsx)(n.th,{style:{textAlign:"center"},children:"Client Location"}),(0,t.jsx)(n.th,{style:{textAlign:"center"},children:"Server Location"}),(0,t.jsx)(n.th,{style:{textAlign:"left"},children:"Default File Suffix"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{style:{textAlign:"center"},children:"CLIENT"}),(0,t.jsx)(n.td,{style:{textAlign:"center"},children:"Client Side Only"}),(0,t.jsx)(n.td,{style:{textAlign:"center"},children:"No"}),(0,t.jsx)(n.td,{style:{textAlign:"center"},children:(0,t.jsx)(n.code,{children:".minecraft/config"})}),(0,t.jsx)(n.td,{style:{textAlign:"center"},children:"N/A"}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:(0,t.jsx)(n.code,{children:"-client"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{style:{textAlign:"center"},children:"COMMON"}),(0,t.jsx)(n.td,{style:{textAlign:"center"},children:"On Both Sides"}),(0,t.jsx)(n.td,{style:{textAlign:"center"},children:"No"}),(0,t.jsx)(n.td,{style:{textAlign:"center"},children:(0,t.jsx)(n.code,{children:".minecraft/config"})}),(0,t.jsx)(n.td,{style:{textAlign:"center"},children:(0,t.jsx)(n.code,{children:"<server_folder>/config"})}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:(0,t.jsx)(n.code,{children:"-common"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{style:{textAlign:"center"},children:"SERVER"}),(0,t.jsx)(n.td,{style:{textAlign:"center"},children:"Server Side Only"}),(0,t.jsx)(n.td,{style:{textAlign:"center"},children:"Yes"}),(0,t.jsx)(n.td,{style:{textAlign:"center"},children:(0,t.jsx)(n.code,{children:".minecraft/saves/<level_name>/serverconfig"})}),(0,t.jsx)(n.td,{style:{textAlign:"center"},children:(0,t.jsx)(n.code,{children:"<server_folder>/world/serverconfig"})}),(0,t.jsx)(n.td,{style:{textAlign:"left"},children:(0,t.jsx)(n.code,{children:"-server"})})]})]})]}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["NeoForge documents the ",(0,t.jsx)(n.a,{href:"https://github.com/neoforged/FancyModLoader/blob/19d6326b810233e683f1beb3d28e41372e1e89d1/core/src/main/java/net/neoforged/fml/config/ModConfig.java#L83-L111",children:"config types"})," within their codebase."]})}),"\n",(0,t.jsx)(n.h2,{id:"configuration-events",children:"Configuration Events"}),"\n",(0,t.jsxs)(n.p,{children:["Operations that occur whenever a config is loaded or reloaded can be done using the ModConfigEvent.Loading and ModConfigEvent.Reloading events. The events must be ",(0,t.jsx)(n.a,{href:"/Neoforge-Korean-Documentation/docs/1.20.4/concepts/events#registering-an-event-handler",children:"registered"})," to the mod event bus."]}),"\n",(0,t.jsx)(n.admonition,{type:"caution",children:(0,t.jsxs)(n.p,{children:["These events are called for all configurations for the mod; the ",(0,t.jsx)(n.code,{children:"ModConfig"})," object provided should be used to denote which configuration is being loaded or reloaded."]})})]})}function h(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(a,{...e})}):a(e)}},1151:(e,n,i)=>{i.d(n,{Z:()=>d,a:()=>o});var t=i(7294);const s={},l=t.createContext(s);function o(e){const n=t.useContext(l);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(l.Provider,{value:n},e.children)}}}]);