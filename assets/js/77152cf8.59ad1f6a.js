"use strict";(self.webpackChunkneoforged_docs=self.webpackChunkneoforged_docs||[]).push([[5809],{3974:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>s});var n=o(5893),l=o(1151);const i={},r="Model Datagen",d={id:"resources/client/models/datagen",title:"Model Datagen",description:"Like most JSON data, block and item models can be datagenned. Since some things are common between item and block models, so is some of the datagen code.",source:"@site/docs/resources/client/models/datagen.md",sourceDirName:"resources/client/models",slug:"/resources/client/models/datagen",permalink:"/Neoforge-Korean-Documentation/docs/resources/client/models/datagen",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Baked Models",permalink:"/Neoforge-Korean-Documentation/docs/resources/client/models/bakedmodel"},next:{title:"Custom Model Loaders",permalink:"/Neoforge-Korean-Documentation/docs/resources/client/models/modelloaders"}},a={},s=[{value:"Model Datagen Classes",id:"model-datagen-classes",level:2},{value:"<code>ModelBuilder</code>",id:"modelbuilder",level:3},{value:"<code>ModelProvider</code>",id:"modelprovider",level:3},{value:"<code>ModelFile</code>",id:"modelfile",level:3},{value:"Block Model Datagen",id:"block-model-datagen",level:2},{value:"<code>ConfiguredModel.Builder</code>",id:"configuredmodelbuilder",level:3},{value:"Item Model Datagen",id:"item-model-datagen",level:2}];function c(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"model-datagen",children:"Model Datagen"}),"\n",(0,n.jsxs)(t.p,{children:["Like most JSON data, block and item models can be ",(0,n.jsx)(t.a,{href:"/Neoforge-Korean-Documentation/docs/resources/#data-generation",children:"datagenned"}),". Since some things are common between item and block models, so is some of the datagen code."]}),"\n",(0,n.jsx)(t.h2,{id:"model-datagen-classes",children:"Model Datagen Classes"}),"\n",(0,n.jsx)(t.h3,{id:"modelbuilder",children:(0,n.jsx)(t.code,{children:"ModelBuilder"})}),"\n",(0,n.jsxs)(t.p,{children:["Every model starts out as a ",(0,n.jsx)(t.code,{children:"ModelBuilder"})," of some sort - usually a ",(0,n.jsx)(t.code,{children:"BlockModelBuilder"})," or an ",(0,n.jsx)(t.code,{children:"ItemModelBuilder"}),", depending on what you are generating. It contains all the properties of the model: its parent, its textures, its elements, its transforms, its loader, etc. Each of the properties can be set by a method:"]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{children:"Method"}),(0,n.jsx)(t.th,{children:"Effect"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"#texture(String key, ResourceLocation texture)"})}),(0,n.jsxs)(t.td,{children:["Adds a texture variable with the given key and the given texture location. Has an overload where the second parameter is a ",(0,n.jsx)(t.code,{children:"String"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"#renderType(ResourceLocation renderType)"})}),(0,n.jsxs)(t.td,{children:["Sets the render type. Has an overload where the parameter is a ",(0,n.jsx)(t.code,{children:"String"}),". For a list of valid values, see the ",(0,n.jsx)(t.code,{children:"RenderType"})," class."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"#ao(boolean ao)"})}),(0,n.jsxs)(t.td,{children:["Sets whether to use ",(0,n.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Ambient_occlusion",children:"ambient occlusion"})," or not."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"#guiLight(GuiLight light)"})}),(0,n.jsxs)(t.td,{children:["Sets the GUI light. May be ",(0,n.jsx)(t.code,{children:"GuiLight.FRONT"})," or ",(0,n.jsx)(t.code,{children:"GuiLight.SIDE"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"#element()"})}),(0,n.jsxs)(t.td,{children:["Adds a new ",(0,n.jsx)(t.code,{children:"ElementBuilder"})," (equivalent to adding a new ",(0,n.jsx)(t.a,{href:"/Neoforge-Korean-Documentation/docs/resources/client/models/#elements",children:"element"})," to the model). Returns said ",(0,n.jsx)(t.code,{children:"ElementBuilder"})," for further modification."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"#transforms()"})}),(0,n.jsxs)(t.td,{children:["Returns the builder's ",(0,n.jsx)(t.code,{children:"TransformVecBuilder"}),", used for setting the ",(0,n.jsx)(t.code,{children:"display"})," on a model."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{children:(0,n.jsx)(t.code,{children:"#customLoader(BiFunction customLoaderFactory)"})}),(0,n.jsxs)(t.td,{children:["Using the given factory, makes this model use a ",(0,n.jsx)(t.a,{href:"/Neoforge-Korean-Documentation/docs/resources/client/models/modelloaders#datagen",children:"custom loader"}),", and thus, a custom loader builder. This changes the builder type, and as such may use different methods, depending on the loader's implementation. NeoForge provides a few custom loaders out of the box, see the linked article for more info (including datagen)."]})]})]})]}),"\n",(0,n.jsx)(t.admonition,{type:"tip",children:(0,n.jsxs)(t.p,{children:["While elaborate and complex models can be created through datagen, it is recommended to instead use modeling software such as ",(0,n.jsx)(t.a,{href:"https://www.blockbench.net",children:"Blockbench"})," to create more complex models and then have the exported models be used, either directly or as parents for other models."]})}),"\n",(0,n.jsx)(t.h3,{id:"modelprovider",children:(0,n.jsx)(t.code,{children:"ModelProvider"})}),"\n",(0,n.jsxs)(t.p,{children:["Both block and item model datagen utilize subclasses of ",(0,n.jsx)(t.code,{children:"ModelProvider"}),", named ",(0,n.jsx)(t.code,{children:"BlockModelProvider"})," and ",(0,n.jsx)(t.code,{children:"ItemModelProvider"}),", respectively. While item model datagen directly extends ",(0,n.jsx)(t.code,{children:"ItemModelProvider"}),", block model datagen uses the ",(0,n.jsx)(t.code,{children:"BlockStateProvider"})," base class, which has an internal ",(0,n.jsx)(t.code,{children:"BlockModelProvider"})," that can be accessed via ",(0,n.jsx)(t.code,{children:"BlockStateProvider#models()"}),". Additionally, ",(0,n.jsx)(t.code,{children:"BlockStateProvider"})," also has its own internal ",(0,n.jsx)(t.code,{children:"ItemModelProvider"}),", accessible via ",(0,n.jsx)(t.code,{children:"BlockStateProvider#itemModels()"}),". The most important part of ",(0,n.jsx)(t.code,{children:"ModelProvider"})," is the ",(0,n.jsx)(t.code,{children:"getBuilder(String path)"})," method, which returns a ",(0,n.jsx)(t.code,{children:"BlockModelBuilder"})," (or ",(0,n.jsx)(t.code,{children:"ItemModelBuilder"}),") at the given location."]}),"\n",(0,n.jsxs)(t.p,{children:["However, ",(0,n.jsx)(t.code,{children:"ModelProvider"})," also contains various helper methods. The most important helper method is probably ",(0,n.jsx)(t.code,{children:"withExistingParent(String name, ResourceLocation parent)"}),", which returns a new builder (via ",(0,n.jsx)(t.code,{children:"getBuilder(name)"}),") and sets the given ",(0,n.jsx)(t.code,{children:"ResourceLocation"})," as model parent. Two other very common helpers are ",(0,n.jsx)(t.code,{children:"mcLoc(String name)"}),", which returns a ",(0,n.jsx)(t.code,{children:"ResourceLocation"})," with the namespace ",(0,n.jsx)(t.code,{children:"minecraft"})," and the given name as path, and ",(0,n.jsx)(t.code,{children:"modLoc(String name)"}),", which does the same but with the provider's mod id (so usually your mod id) instead of ",(0,n.jsx)(t.code,{children:"minecraft"}),". Furthermore, it provides various helper methods that are shortcuts for ",(0,n.jsx)(t.code,{children:"#withExistingParent"})," for common things such as slabs, stairs, fences, doors, etc."]}),"\n",(0,n.jsx)(t.h3,{id:"modelfile",children:(0,n.jsx)(t.code,{children:"ModelFile"})}),"\n",(0,n.jsxs)(t.p,{children:["Finally, the last important class is ",(0,n.jsx)(t.code,{children:"ModelFile"}),". A ",(0,n.jsx)(t.code,{children:"ModelFile"})," is an in-code representation of a model JSON on disk. ",(0,n.jsx)(t.code,{children:"ModelFile"})," is an abstract class and has two inner subclasses ",(0,n.jsx)(t.code,{children:"ExistingModelFile"})," and ",(0,n.jsx)(t.code,{children:"UncheckedModelFile"}),". An ",(0,n.jsx)(t.code,{children:"ExistingModelFile"}),"'s existence is verified using an ",(0,n.jsx)(t.code,{children:"ExistingFileHelper"}),", while an ",(0,n.jsx)(t.code,{children:"UncheckedModelFile"})," is assumed to be existent without further checking. In addition, a ",(0,n.jsx)(t.code,{children:"ModelBuilder"})," is considered to be a ",(0,n.jsx)(t.code,{children:"ModelFile"})," as well."]}),"\n",(0,n.jsx)(t.h2,{id:"block-model-datagen",children:"Block Model Datagen"}),"\n",(0,n.jsxs)(t.p,{children:["Now, to actually generate blockstate and block model files, extend ",(0,n.jsx)(t.code,{children:"BlockStateProvider"})," and override the ",(0,n.jsx)(t.code,{children:"registerStatesAndModels()"})," method. Note that block models will always be placed in the ",(0,n.jsx)(t.code,{children:"models/block"})," subfolder, but references are relative to ",(0,n.jsx)(t.code,{children:"models"})," (i.e. they must always be prefixed with ",(0,n.jsx)(t.code,{children:"block/"}),"). In most cases, it makes sense to choose from one of the many predefined helper methods:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:'public class MyBlockStateProvider extends BlockStateProvider {\n    // Parameter values are provided by GatherDataEvent.\n    public MyBlockStateProvider(PackOutput output, ExistingFileHelper existingFileHelper) {\n        // Replace "examplemod" with your own mod id.\n        super(output, "examplemod", existingFileHelper);\n    }\n    \n    @Override\n    protected void registerStatesAndModels() {\n        // Placeholders, their usages should be replaced with real values. See above for how to use the model builder,\n        // and below for the helpers the model builder offers.\n        ModelFile exampleModel = models().withExistingParent("minecraft:block/cobblestone");\n        Block block = MyBlocksClass.EXAMPLE_BLOCK.get();\n        ResourceLocation exampleTexture = modLoc("block/example_texture");\n        ResourceLocation bottomTexture = modLoc("block/example_texture_bottom");\n        ResourceLocation topTexture = modLoc("block/example_texture_top");\n        ResourceLocation sideTexture = modLoc("block/example_texture_front");\n        ResourceLocation frontTexture = modLoc("block/example_texture_front");\n\n        // Create a simple block model with the same texture on each side.\n        // The texture must be located at assets/<namespace>/textures/block/<path>.png, where\n        // <namespace> and <path> are the block\'s registry name\'s namespace and path, respectively.\n        // Used by the majority of (full) blocks, such as planks, cobblestone or bricks.\n        simpleBlock(block);\n        // Overload that accepts a model file to use.\n        simpleBlock(block, exampleModel);\n        // Overload that accepts one or multiple (vararg) ConfiguredModel objects.\n        // See below for more info about ConfiguredModel.\n        simpleBlock(block, ConfiguredModel.builder().build());\n        // Adds an item model file with the block\'s name, parenting the given model file, for a block item to pick up.\n        simpleBlockItem(block, exampleModel);\n        // Shorthand for calling #simpleBlock() (model file overload) and #simpleBlockItem.\n        simpleBlockWithItem(block, exampleModel);\n        \n        // Adds a log block model. Requires two textures at assets/<namespace>/textures/block/<path>.png and\n        // assets/<namespace>/textures/block/<path>_top.png, referencing the side and top texture, respectively.\n        // Note that the block input here is limited to RotatedPillarBlock, which is the class vanilla logs use.\n        logBlock(block);\n        // Like #logBlock, but the textures are named <path>_side.png and <path>_end.png instead of\n        // <path>.png and <path>_top.png, respectively. Used by quartz pillars and similar blocks.\n        // Has an overload that allow you to specify a different texture base name, that is then suffixed\n        // with _side and _end as needed, an overload that allows you to specify two resource locations\n        // for the side and end textures, and an overload that allows specifying side and end model files.\n        axisBlock(block);\n        // Variants of #logBlock and #axisBlock that additionally allow for render types to be specified.\n        // Comes in string and resource location variants for the render type,\n        // in all combinations with all variants of #logBlock and #axisBlock.\n        logBlockWithRenderType(block, "minecraft:cutout");\n        axisBlockWithRenderType(block, mcLoc("cutout_mipped"));\n        \n        // Specifies a horizontally-rotatable block model with a side texture, a front texture, and a top texture.\n        // The bottom will use the side texture as well. If you don\'t need the front or top texture,\n        // just pass in the side texture twice. Used by e.g. furnaces and similar blocks.\n        horizontalBlock(block, sideTexture, frontTexture, topTexture);\n        // Specifies a horizontally-rotatable block model with a model file that will be rotated as needed.\n        // Has an overload that instead of a model file accepts a Function<BlockState, ModelFile>,\n        // allowing for different rotations to use different models. Used e.g. by the stonecutter.\n        horizontalBlock(block, exampleModel);\n        // Specifies a horizontally-rotatable block model that is attached to a face, e.g. for buttons or levers.\n        // Accounts for placing the block on the ground and on the ceiling, and rotates them accordingly.\n        // Like #horizontalBlock, has an overload that accepts a Function<BlockState, ModelFile> instead.\n        horizontalFaceBlock(block, exampleModel);\n        // Similar to #horizontalBlock, but for blocks that are rotatable in all directions, including up and down.\n        // Again, has an overload that accepts a Function<BlockState, ModelFile> instead.\n        directionalBlock(block, exampleModel);\n    }\n}\n'})}),"\n",(0,n.jsxs)(t.p,{children:["Additionally, helpers for the following common block models exist in ",(0,n.jsx)(t.code,{children:"BlockStateProvider"}),":"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"Stairs"}),"\n",(0,n.jsx)(t.li,{children:"Slabs"}),"\n",(0,n.jsx)(t.li,{children:"Buttons"}),"\n",(0,n.jsx)(t.li,{children:"Pressure Plates"}),"\n",(0,n.jsx)(t.li,{children:"Signs"}),"\n",(0,n.jsx)(t.li,{children:"Fences"}),"\n",(0,n.jsx)(t.li,{children:"Fence Gates"}),"\n",(0,n.jsx)(t.li,{children:"Walls"}),"\n",(0,n.jsx)(t.li,{children:"Panes"}),"\n",(0,n.jsx)(t.li,{children:"Doors"}),"\n",(0,n.jsx)(t.li,{children:"Trapdoors"}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["In some cases, the blockstates don't need special casing, but the models do. For this case, the ",(0,n.jsx)(t.code,{children:"BlockModelProvider"}),", accessible via ",(0,n.jsx)(t.code,{children:"BlockStateProvider#models()"}),", provides a few additional helpers, all of which accept a name as the first parameter and most of which are in some way related to full cubes. They will typically be used as model file parameters for e.g. ",(0,n.jsx)(t.code,{children:"simpleBlock"}),". The helpers include supporting methods for the ones in ",(0,n.jsx)(t.code,{children:"BlockStateProvider"}),", as well as:"]}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"withExistingParent"}),": Already mentioned before, this method returns a new model builder with the given parent. The parent must either already exist or be created before the model."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"getExistingFile"}),": Performs a lookup in the model provider's ",(0,n.jsx)(t.code,{children:"ExistingFileHelper"}),", returning the corresponding ",(0,n.jsx)(t.code,{children:"ModelFile"})," if present and throwing an ",(0,n.jsx)(t.code,{children:"IllegalStateException"})," otherwise."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"singleTexture"}),": Accepts a parent and a single texture location, returning a model with the given parent, and with the texture variable ",(0,n.jsx)(t.code,{children:"texture"})," set to the given texture location."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"sideBottomTop"}),": Accepts a parent and three texture locations, returning a model with the given parent and the side, bottom and top textures set to the three texture locations."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"cube"}),": Accepts six texture resource locations for the six sides, returning a full cube model with the six sides set to the six textures."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"cubeAll"}),": Accepts a texture location, returning a full cube model with the given texture applied to all six sides. A mix between ",(0,n.jsx)(t.code,{children:"singleTexture"})," and ",(0,n.jsx)(t.code,{children:"cube"}),", if you will."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"cubeTop"}),": Accepts two texture locations, returning a full cube model with the first texture applied to the sides and the bottom, and the second texture applied to the top."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"cubeBottomTop"}),": Accepts three texture locations, returning a full cube model with the side, bottom and top textures set to the three texture locations. A mix between ",(0,n.jsx)(t.code,{children:"cube"})," and ",(0,n.jsx)(t.code,{children:"sideBottomTop"}),", if you will."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"cubeColumn"})," and ",(0,n.jsx)(t.code,{children:"cubeColumnHorizontal"}),': Accepts two texture locations, returning a "standing" or "laying" pillar cube model with the side and end textures set to the two texture locations. Used by ',(0,n.jsx)(t.code,{children:"BlockStateProvider#logBlock"}),", ",(0,n.jsx)(t.code,{children:"BlockStateProvider#axisBlock"})," and their variants."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"orientable"}),': Accepts three texture locations, returning a cube with a "front" texture. The three texture locations are the side, front and top texture, respectively.']}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"orientableVertical"}),": Variant of ",(0,n.jsx)(t.code,{children:"orientable"})," that omits the top parameter, instead using the side parameter as well."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"orientableWithBottom"}),": Variant of ",(0,n.jsx)(t.code,{children:"orientable"})," that has a fourth parameter for a bottom texture between the front and top parameter."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"crop"}),": Accepts a texture location, returning a crop-like model with the given texture, as used by the four vanilla crops."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"cross"}),": Accepts a texture location, returning a cross model with the given texture, as used by flowers, saplings and many other foliage blocks."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"torch"}),": Accepts a texture location, returning a torch model with the given texture."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"wall_torch"}),": Accepts a texture location, returning a wall torch model with the given texture (wall torches are separate blocks from standing torches)."]}),"\n",(0,n.jsxs)(t.li,{children:[(0,n.jsx)(t.code,{children:"carpet"}),": Accepts a texture location, returning a carpet model with the given texture."]}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"Finally, don't forget to register your block state provider to the event:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:"@SubscribeEvent\npublic static void gatherData(GatherDataEvent event) {\n    DataGenerator generator = event.getGenerator();\n    PackOutput output = generator.getPackOutput();\n    ExistingFileHelper existingFileHelper = event.getExistingFileHelper();\n\n    // other providers here\n    generator.addProvider(\n        event.includeClient(),\n        new MyBlockStateProvider(output, existingFileHelper)\n    );\n}\n"})}),"\n",(0,n.jsx)(t.h3,{id:"configuredmodelbuilder",children:(0,n.jsx)(t.code,{children:"ConfiguredModel.Builder"})}),"\n",(0,n.jsxs)(t.p,{children:["If the default helpers won't do it for you, you can also directly build model objects using a ",(0,n.jsx)(t.code,{children:"ConfiguredModel.Builder"})," and then use them in a ",(0,n.jsx)(t.code,{children:"VariantBlockStateBuilder"})," to build a ",(0,n.jsx)(t.code,{children:"variants"})," blockstate file, or in a ",(0,n.jsx)(t.code,{children:"MultiPartBlockStateBuilder"})," to build a ",(0,n.jsx)(t.code,{children:"multipart"})," blockstate file:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:'// Create a ConfiguredModel.Builder. Alternatively, you can use one of the ways demonstrated below\n// (VariantBlockStateBuilder.PartialBlockstate#modelForState or MultiPartBlockStateBuilder#part) where applicable.\nConfiguredModel.Builder<?> builder = ConfiguredModel.builder()\n// Use a model file. As mentioned previously, can either be an ExistingModelFile, an UncheckedModelFile,\n// or some sort of ModelBuilder. See above for how to use ModelBuilder.\n        .modelFile(models().withExistingParent("minecraft:block/cobblestone"))\n        // Set rotations around the x and y axes.\n        .rotationX(90)\n        .rotationY(180)\n        // Set a uvlock.\n        .uvlock(true)\n        // Set a weight.\n        .weight(5);\n// Build the configured model. The return type is an array\n// to account for multiple possible models in the same blockstate.\nConfiguredModel[] model = builder.build();\n\n// Get a variant block state builder.\nVariantBlockStateBuilder variantBuilder = getVariantBuilder(MyBlocksClass.EXAMPLE_BLOCK.get());\n// Create a partial state and set properties on it.\nVariantBlockStateBuilder.PartialBlockstate partialState = variantBuilder.partialState();\n// Add one or multiple models for a partial blockstate. The models are a vararg parameter.\nvariantBuilder.addModels(partialState,\n    // Specify at least one ConfiguredModel.Builder, as seen above. Create through #modelForState().\n    partialState.modelForState()\n        .modelFile(models().withExistingParent("minecraft:block/cobblestone"))\n        .uvlock(true)\n);\n// Alternatively, forAllStates(Function<BlockState, ConfiguredModel[]>) creates a model for every state.\n// The passed function will be called once for each possible state.\nvariantBuilder.forAllStates(state -> {\n    // Return a ConfiguredModel depending on the state\'s properties.\n    // For example, the following code will rotate the model depending on the horizontal rotation of the block.\n    return ConfiguredModel.builder()\n        .modelFile(models().withExistingParent("minecraft:block/cobblestone"))\n        .rotationY((int) state.getValue(BlockStateProperties.HORIZONTAL_FACING).toYRot())\n        .build();\n});\n\n// Get a multipart block state builder.\nMultiPartBlockStateBuilder multipartBuilder = getMultipartBuilder(MyBlocksClass.EXAMPLE_BLOCK.get());\n// Add a new part. Starts with .part() and ends with .end().\nmultipartBuilder.addPart(multipartBuilder.part()\n    // Step one: Build the model. multipartBuilder.part() returns a ConfiguredModel.Builder,\n    // meaning that all methods seen above can be used here as well.\n    .modelFile("minecraft:block/cobblestone")\n    // Call .addModel(). Now that the model is built, we can proceed to step two: add the part data.\n    .addModel()\n    // Add a condition for the part. Requires a property\n    // and at least one property value; property values are a vararg.\n    .condition(BlockStateProperties.FACING, Direction.NORTH, Direction.SOUTH)\n    // Set the multipart conditions to be ORed instead of the default ANDing.\n    .useOr()\n    // Creates a nested condition group.\n    .nestedGroup()\n    // Adds a condition to the nested group.\n    .condition(BlockStateProperties.FACING, Direction.NORTH)\n    // Sets only this condition group to be ORed instead of ANDed.\n    .useOr()\n    // Creates yet another nested condition group. There is no limit on how many groups can be nested.\n    .nestedGroup()\n    // Ends the nested condition group, returning to the owning part builder or condition group level.\n    // Called twice here since we currently have two nested groups.\n    .endNestedGroup()\n    .endNestedGroup()\n    // End the part builder and add the resulting part to the multipart builder.\n    .end()\n);\n'})}),"\n",(0,n.jsx)(t.h2,{id:"item-model-datagen",children:"Item Model Datagen"}),"\n",(0,n.jsxs)(t.p,{children:["Generating item models is considerably simpler, which is mainly due to the fact that we operate directly on an ",(0,n.jsx)(t.code,{children:"ItemModelProvider"})," instead of using an intermediate class like ",(0,n.jsx)(t.code,{children:"BlockStateProvider"}),", which is of course because item models don't have an equivalent to blockstate files and are instead used directly."]}),"\n",(0,n.jsxs)(t.p,{children:["Similar to above, we create a class and have it extend the base provider, in this case ",(0,n.jsx)(t.code,{children:"ItemModelProvider"}),". Since we are directly in a subclass of ",(0,n.jsx)(t.code,{children:"ModelProvider"}),", all ",(0,n.jsx)(t.code,{children:"models()"})," calls become ",(0,n.jsx)(t.code,{children:"this"})," (or are omitted)."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:'public class MyItemModelProvider extends ItemModelProvider {\n    public MyItemModelProvider(PackOutput output, ExistingFileHelper existingFileHelper) {\n        super(output, "examplemod", existingFileHelper);\n    }\n    \n    @Override\n    protected void registerModels() {\n        // Block items generally use their corresponding block models as parent.\n        withExistingParent(MyItemsClass.EXAMPLE_BLOCK_ITEM.get(), modLoc("block/example_block"));\n        // Items generally use a simple parent and one texture. The most common parents are item/generated and item/handheld.\n        // In this example, the item texture would be located at assets/examplemod/textures/item/example_item.png.\n        // If you want a more complex model, you can use getBuilder() and then work from that, like you would with block models.\n        withExistingParent(MyItemsClass.EXAMPLE_ITEM.get(), mcLoc("item/generated")).texture("layer0", "item/example_item");\n        // The above line is so common that there is a shortcut for it. Note that the item registry name and the\n        // texture path, relative to textures/item, must match.\n        basicItem(MyItemsClass.EXAMPLE_ITEM.get());\n    }\n}\n'})}),"\n",(0,n.jsx)(t.p,{children:"And like all data providers, don't forget to register your provider to the event:"}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:"@SubscribeEvent\npublic static void gatherData(GatherDataEvent event) {\n    DataGenerator generator = event.getGenerator();\n    PackOutput output = generator.getPackOutput();\n    ExistingFileHelper existingFileHelper = event.getExistingFileHelper();\n\n    // other providers here\n    generator.addProvider(\n        event.includeClient(),\n        new MyItemModelProvider(output, existingFileHelper)\n    );\n}\n"})})]})}function h(e={}){const{wrapper:t}={...(0,l.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(c,{...e})}):c(e)}},1151:(e,t,o)=>{o.d(t,{Z:()=>d,a:()=>r});var n=o(7294);const l={},i=n.createContext(l);function r(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);