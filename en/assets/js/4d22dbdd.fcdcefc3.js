"use strict";(self.webpackChunkneoforged_docs=self.webpackChunkneoforged_docs||[]).push([[2894],{5175:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>a,contentTitle:()=>t,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var d=n(5893),i=n(1151);const o={},t="ItemOverrides",s={id:"rendering/modelloaders/itemoverrides",title:"ItemOverrides",description:"ItemOverrides provides a way for an BakedModel to process the state of an ItemStack and return a new BakedModel; thereafter, the returned model replaces the old one. ItemOverrides represents an arbitrary function (BakedModel, ItemStack, ClientLevel, LivingEntity, int) \u2192 BakedModel, making it useful for dynamic models. In vanilla, it is used to implement item property overrides.",source:"@site/docs/rendering/modelloaders/itemoverrides.md",sourceDirName:"rendering/modelloaders",slug:"/rendering/modelloaders/itemoverrides",permalink:"/Neoforge-Korean-Documentation/en/docs/rendering/modelloaders/itemoverrides",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"BakedModel",permalink:"/Neoforge-Korean-Documentation/en/docs/rendering/modelloaders/bakedmodel"},next:{title:"Transform",permalink:"/Neoforge-Korean-Documentation/en/docs/rendering/modelloaders/transform"}},a={},l=[{value:"<code>ItemOverrides()</code>",id:"itemoverrides-1",level:3},{value:"<code>resolve</code>",id:"resolve",level:3},{value:"<code>getOverrides</code>",id:"getoverrides",level:3},{value:"<code>BakedOverride</code>",id:"bakedoverride",level:2}];function c(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(r.h1,{id:"itemoverrides",children:(0,d.jsx)(r.code,{children:"ItemOverrides"})}),"\n",(0,d.jsxs)(r.p,{children:[(0,d.jsx)(r.code,{children:"ItemOverrides"})," provides a way for an ",(0,d.jsx)(r.a,{href:"/Neoforge-Korean-Documentation/en/docs/rendering/modelloaders/bakedmodel",children:(0,d.jsx)(r.code,{children:"BakedModel"})})," to process the state of an ",(0,d.jsx)(r.code,{children:"ItemStack"})," and return a new ",(0,d.jsx)(r.code,{children:"BakedModel"}),"; thereafter, the returned model replaces the old one. ",(0,d.jsx)(r.code,{children:"ItemOverrides"})," represents an arbitrary function ",(0,d.jsx)(r.code,{children:"(BakedModel, ItemStack, ClientLevel, LivingEntity, int)"})," \u2192 ",(0,d.jsx)(r.code,{children:"BakedModel"}),", making it useful for dynamic models. In vanilla, it is used to implement item property overrides."]}),"\n",(0,d.jsx)(r.h3,{id:"itemoverrides-1",children:(0,d.jsx)(r.code,{children:"ItemOverrides()"})}),"\n",(0,d.jsxs)(r.p,{children:["Given a list of ",(0,d.jsx)(r.code,{children:"ItemOverride"}),"s, the constructor copies and bakes the list. The baked overrides may be accessed with ",(0,d.jsx)(r.code,{children:"#getOverrides"}),"."]}),"\n",(0,d.jsx)(r.h3,{id:"resolve",children:(0,d.jsx)(r.code,{children:"resolve"})}),"\n",(0,d.jsxs)(r.p,{children:["This takes an ",(0,d.jsx)(r.code,{children:"BakedModel"}),", an ",(0,d.jsx)(r.code,{children:"ItemStack"}),", a ",(0,d.jsx)(r.code,{children:"ClientLevel"}),", a ",(0,d.jsx)(r.code,{children:"LivingEntity"}),", and an ",(0,d.jsx)(r.code,{children:"int"})," to produce another ",(0,d.jsx)(r.code,{children:"BakedModel"})," to use for rendering. This is where models can handle the state of their items."]}),"\n",(0,d.jsx)(r.p,{children:"This should not mutate the level."}),"\n",(0,d.jsx)(r.h3,{id:"getoverrides",children:(0,d.jsx)(r.code,{children:"getOverrides"})}),"\n",(0,d.jsxs)(r.p,{children:["Returns an immutable list containing all the ",(0,d.jsx)(r.a,{href:"#bakedoverride",children:(0,d.jsx)(r.code,{children:"BakedOverride"})}),"s used by this ",(0,d.jsx)(r.code,{children:"ItemOverrides"}),". If none are applicable, this returns the empty list."]}),"\n",(0,d.jsx)(r.h2,{id:"bakedoverride",children:(0,d.jsx)(r.code,{children:"BakedOverride"})}),"\n",(0,d.jsxs)(r.p,{children:["This class represents a vanilla item override, which holds several ",(0,d.jsx)(r.code,{children:"ItemOverrides$PropertyMatcher"})," for the properties on an item and a model to use in case those matchers are satisfied. They are the objects in the ",(0,d.jsx)(r.code,{children:"overrides"})," array of a vanilla item JSON model:"]}),"\n",(0,d.jsx)(r.pre,{children:(0,d.jsx)(r.code,{className:"language-js",children:'{\n  // Inside a vanilla JSON item model\n  "overrides": [\n    {\n      // This is an ItemOverride\n      "predicate": {\n        // This is the Map<ResourceLocation, Float>, containing the names of properties and their minimum values\n        "example1:prop": 0.5\n      },\n      // This is the \'location\', or target model, of the override, which is used if the predicate above matches\n      "model": "example1:item/model"\n    },\n    {\n      // This is another ItemOverride\n      "predicate": {\n        "example2:prop": 1\n      },\n      "model": "example2:item/model"\n    }\n  ]\n}\n'})})]})}function h(e={}){const{wrapper:r}={...(0,i.a)(),...e.components};return r?(0,d.jsx)(r,{...e,children:(0,d.jsx)(c,{...e})}):c(e)}},1151:(e,r,n)=>{n.d(r,{Z:()=>s,a:()=>t});var d=n(7294);const i={},o=d.createContext(i);function t(e){const r=d.useContext(o);return d.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function s(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:t(e.components),d.createElement(o.Provider,{value:r},e.children)}}}]);