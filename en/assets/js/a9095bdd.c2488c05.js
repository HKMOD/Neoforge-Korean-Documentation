"use strict";(self.webpackChunkneoforged_docs=self.webpackChunkneoforged_docs||[]).push([[9546],{6960:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var n=r(5893),a=r(1151);const o={},i="Datapack Registry Object Generation",s={id:"datagen/server/datapackregistries",title:"Datapack Registry Object Generation",description:"Datapack registry objects can be generated for a mod by constructing a new DatapackBuiltinEntriesProvider and providing a RegistrySetBuilder with the new objects to register. The provider must be added to the DataGenerator.",source:"@site/docs/datagen/server/datapackregistries.md",sourceDirName:"datagen/server",slug:"/datagen/server/datapackregistries",permalink:"/Neoforge-Korean-Documentation/en/docs/datagen/server/datapackregistries",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Advancement Generation",permalink:"/Neoforge-Korean-Documentation/en/docs/datagen/server/advancements"},next:{title:"Global Loot Modifier Generation",permalink:"/Neoforge-Korean-Documentation/en/docs/datagen/server/glm"}},c={},d=[{value:"<code>RegistrySetBuilder</code>",id:"registrysetbuilder",level:2},{value:"Registering with <code>BootstapContext</code>",id:"registering-with-bootstapcontext",level:2},{value:"Datapack Registry Object Lookup",id:"datapack-registry-object-lookup",level:3}];function g(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"datapack-registry-object-generation",children:"Datapack Registry Object Generation"}),"\n",(0,n.jsxs)(t.p,{children:["Datapack registry objects can be generated for a mod by constructing a new ",(0,n.jsx)(t.code,{children:"DatapackBuiltinEntriesProvider"})," and providing a ",(0,n.jsx)(t.code,{children:"RegistrySetBuilder"})," with the new objects to register. The provider must be ",(0,n.jsx)(t.a,{href:"/Neoforge-Korean-Documentation/en/docs/datagen/#data-providers",children:"added"})," to the ",(0,n.jsx)(t.code,{children:"DataGenerator"}),"."]}),"\n",(0,n.jsxs)(t.p,{children:["!!! note\n",(0,n.jsx)(t.code,{children:"DatapackBuiltinEntriesProvider"})," is a Forge extension on top of ",(0,n.jsx)(t.code,{children:"RegistriesDatapackGenerator"})," which properly handles referencing existing datapack registry objects without exploding the entry. So, this documentation will use ",(0,n.jsx)(t.code,{children:"DatapackBuiltinEntriesProvider"}),"."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:"// On the MOD event bus\n@SubscribeEvent\npublic void gatherData(GatherDataEvent event) {\n    event.getGenerator().addProvider(\n        // Tell generator to run only when server data are generating\n        event.includeServer(),\n        output -> new DatapackBuiltinEntriesProvider(\n          output,\n          event.getLookupProvider(),\n          // The builder containing the datapack registry objects to generate\n          new RegistrySetBuilder().add(/* ... */),\n          // Set of mod ids to generate the datapack registry objects of\n          Set.of(MOD_ID)\n        )\n    );\n}\n"})}),"\n",(0,n.jsx)(t.h2,{id:"registrysetbuilder",children:(0,n.jsx)(t.code,{children:"RegistrySetBuilder"})}),"\n",(0,n.jsxs)(t.p,{children:["A ",(0,n.jsx)(t.code,{children:"RegistrySetBuilder"})," is responsible for building all datapack registry objects to be used within the game. The builder can add a new entry for a registry, which can then register objects to that registry."]}),"\n",(0,n.jsxs)(t.p,{children:["First, a new instance of a ",(0,n.jsx)(t.code,{children:"RegistrySetBuilder"})," can be initialized by calling the constructor. Then, the ",(0,n.jsx)(t.code,{children:"#add"})," method (which takes in the ",(0,n.jsx)(t.code,{children:"ResourceKey"})," of the registry, a ",(0,n.jsx)(t.code,{children:"RegistryBootstrap"})," consumer containing the ",(0,n.jsx)(t.code,{children:"BootstapContext"})," to register the objects, and an optional ",(0,n.jsx)(t.code,{children:"Lifecycle"})," argument to indicate the registry's current lifecycle status) can be called to handle a specific registry for registration."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:"new RegistrySetBuilder()\n  // Create configured features\n  .add(Registries.CONFIGURED_FEATURE, bootstrap -> {\n    // Register configured features here\n  })\n  // Create placed features\n  .add(Registries.PLACED_FEATURE, bootstrap -> {\n    // Register placed features here\n  });\n"})}),"\n",(0,n.jsxs)(t.p,{children:["!!! note\nDatapack registries created through Forge can also generate their objects using this builder by also passing in the associated ",(0,n.jsx)(t.code,{children:"ResourceKey"}),"."]}),"\n",(0,n.jsxs)(t.h2,{id:"registering-with-bootstapcontext",children:["Registering with ",(0,n.jsx)(t.code,{children:"BootstapContext"})]}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"#register"})," method in the ",(0,n.jsx)(t.code,{children:"BootstapContext"})," provided by the builder can be used to register objects. It takes in the ",(0,n.jsx)(t.code,{children:"ResourceKey"})," representing the registry name of the object, the object to register, and an optional ",(0,n.jsx)(t.code,{children:"Lifecycle"})," argument to indicate the registry object's current lifecycle status."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:'public static final ResourceKey<ConfiguredFeature<?, ?>> EXAMPLE_CONFIGURED_FEATURE = ResourceKey.create(\n  Registries.CONFIGURED_FEATURE,\n  new ResourceLocation(MOD_ID, "example_configured_feature")\n);\n\n// In some constant location or argument\nnew RegistrySetBuilder()\n  // Create configured features\n  .add(Registries.CONFIGURED_FEATURE, bootstrap -> {\n    // Register configured features here\n    bootstrap.register(\n      // The resource key for the configured feature\n      EXAMPLE_CONFIGURED_FEATURE,\n      new ConfiguredFeature<>(\n        Feature.ORE, // Create an ore feature\n        new OreConfiguration(\n          List.of(), // Does nothing\n          8 // in veins of at most 8\n        )\n      )\n    );\n  })\n  // Create placed features\n  .add(Registries.PLACED_FEATURE, bootstrap -> {\n    // Register placed features here\n  });\n'})}),"\n",(0,n.jsx)(t.h3,{id:"datapack-registry-object-lookup",children:"Datapack Registry Object Lookup"}),"\n",(0,n.jsxs)(t.p,{children:["Sometimes datapack registry objects may want to use other datapack registry objects or tags containing datapack registry objects. In those cases, you can look up another datapack registry using ",(0,n.jsx)(t.code,{children:"BootstapContext#lookup"})," to get a ",(0,n.jsx)(t.code,{children:"HolderGetter"}),". From there, you can get a ",(0,n.jsx)(t.code,{children:"Holder$Reference"})," to the datapack registry object or a ",(0,n.jsx)(t.code,{children:"HolderSet$Named"})," for the tag via ",(0,n.jsx)(t.code,{children:"#getOrThrow"})," by passing in the associated key."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:'public static final ResourceKey<ConfiguredFeature<?, ?>> EXAMPLE_CONFIGURED_FEATURE = ResourceKey.create(\n  Registries.CONFIGURED_FEATURE,\n  new ResourceLocation(MOD_ID, "example_configured_feature")\n);\n\npublic static final ResourceKey<PlacedFeature> EXAMPLE_PLACED_FEATURE = ResourceKey.create(\n  Registries.PLACED_FEATURE,\n  new ResourceLocation(MOD_ID, "example_placed_feature")\n);\n\n// In some constant location or argument\nnew RegistrySetBuilder()\n  // Create configured features\n  .add(Registries.CONFIGURED_FEATURE, bootstrap -> {\n    // Register configured features here\n    bootstrap.register(\n      // The resource key for the configured feature\n      EXAMPLE_CONFIGURED_FEATURE,\n      new ConfiguredFeature(/* ... */)\n    );\n  })\n  // Create placed features\n  .add(Registries.PLACED_FEATURE, bootstrap -> {\n    // Register placed features here\n\n    // Get configured feature registry\n    HolderGetter<ConfiguredFeature<?, ?>> configured = bootstrap.lookup(Registries.CONFIGURED_FEATURE);\n\n    bootstrap.register(\n      // The resource key for the placed feature\n      EXAMPLE_PLACED_FEATURE,\n      new PlacedFeature(\n        configured.getOrThrow(EXAMPLE_CONFIGURED_FEATURE), // Get the configured feature\n        List.of() // and do nothing to the placement location\n      )\n    )\n  });\n'})})]})}function u(e={}){const{wrapper:t}={...(0,a.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(g,{...e})}):g(e)}},1151:(e,t,r)=>{r.d(t,{Z:()=>s,a:()=>i});var n=r(7294);const a={},o=n.createContext(a);function i(e){const t=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);