"use strict";(self.webpackChunkneoforged_docs=self.webpackChunkneoforged_docs||[]).push([[3571],{3176:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>o});var n=s(5893),i=s(1151);const a={},r="Game Tests",l={id:"misc/gametest",title:"Game Tests",description:"Game Tests are a way to run in-game unit tests. The system was designed to be scalable and in parallel to run large numbers of different tests efficiently. Testing object interactions and behaviors are simply a few of the many applications of this framework.",source:"@site/versioned_docs/version-1.20.4/misc/gametest.mdx",sourceDirName:"misc",slug:"/misc/gametest",permalink:"/Neoforge-Korean-Documentation/en/docs/1.20.4/misc/gametest",draft:!1,unlisted:!1,tags:[],version:"1.20.4",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Debug Profiler",permalink:"/Neoforge-Korean-Documentation/en/docs/1.20.4/misc/debugprofiler"},next:{title:"Key Mappings",permalink:"/Neoforge-Korean-Documentation/en/docs/1.20.4/misc/keymappings"}},c={},o=[{value:"Creating a Game Test",id:"creating-a-game-test",level:2},{value:"The Test Method",id:"the-test-method",level:3},{value:"Relative Positioning",id:"relative-positioning",level:4},{value:"Successful Completion",id:"successful-completion",level:4},{value:"Scheduling Actions",id:"scheduling-actions",level:4},{value:"Assertions",id:"assertions",level:4},{value:"Generated Test Methods",id:"generated-test-methods",level:3},{value:"TestFunction",id:"testfunction",level:4},{value:"Batching",id:"batching",level:3},{value:"Registering a Game Test",id:"registering-a-game-test",level:2},{value:"GameTestHolder",id:"gametestholder",level:3},{value:"RegisterGameTestsEvent",id:"registergametestsevent",level:3},{value:"Structure Templates",id:"structure-templates",level:2},{value:"Running Game Tests",id:"running-game-tests",level:2},{value:"Buildscript Configurations",id:"buildscript-configurations",level:2},{value:"Enabling Other Namespaces",id:"enabling-other-namespaces",level:3},{value:"Game Test Server Run Configuration",id:"game-test-server-run-configuration",level:3},{value:"Enabling Game Tests in Other Run Configurations",id:"enabling-game-tests-in-other-run-configurations",level:3}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.a)(),...e.components},{Details:s}=t;return s||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"game-tests",children:"Game Tests"}),"\n",(0,n.jsx)(t.p,{children:"Game Tests are a way to run in-game unit tests. The system was designed to be scalable and in parallel to run large numbers of different tests efficiently. Testing object interactions and behaviors are simply a few of the many applications of this framework."}),"\n",(0,n.jsx)(t.h2,{id:"creating-a-game-test",children:"Creating a Game Test"}),"\n",(0,n.jsx)(t.p,{children:"A standard Game Test follows three basic steps:"}),"\n",(0,n.jsxs)(t.ol,{children:["\n",(0,n.jsx)(t.li,{children:"A structure, or template, is loaded holding the scene on which the interaction or behavior is tested."}),"\n",(0,n.jsx)(t.li,{children:"A method conducts the logic to perform on the scene."}),"\n",(0,n.jsx)(t.li,{children:"The method logic executes. If a successful state is reached, then the test succeeds. Otherwise, the test fails and the result is stored within a lectern adjacent to the scene."}),"\n"]}),"\n",(0,n.jsx)(t.p,{children:"As such, to create a Game Test, there must be an existing template holding the initial start state of the scene and a method which provides the logic of execution."}),"\n",(0,n.jsx)(t.h3,{id:"the-test-method",children:"The Test Method"}),"\n",(0,n.jsxs)(t.p,{children:["A Game Test method is a ",(0,n.jsx)(t.code,{children:"Consumer<GameTestHelper>"})," reference, meaning it takes in a ",(0,n.jsx)(t.code,{children:"GameTestHelper"})," and returns nothing. For a Game Test method to be recognized, it must have a ",(0,n.jsx)(t.code,{children:"@GameTest"})," annotation:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:"public class ExampleGameTests {\n  @GameTest\n  public static void exampleTest(GameTestHelper helper) {\n    // Do stuff\n  }\n}\n"})}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"@GameTest"})," annotation also contains members which configure how the game test should run."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:"// In some class\n@GameTest(\n  setupTicks = 20L, // The test spends 20 ticks to set up for execution\n  required = false // The failure is logged but does not affect the execution of the batch\n)\npublic static void exampleConfiguredTest(GameTestHelper helper) {\n  // Do stuff\n}\n"})}),"\n",(0,n.jsx)(t.h4,{id:"relative-positioning",children:"Relative Positioning"}),"\n",(0,n.jsxs)(t.p,{children:["All ",(0,n.jsx)(t.code,{children:"GameTestHelper"})," methods translate relative coordinates within the structure template scene to its absolute coordinates using the structure block's current location. To allow for easy conversion between relative and absolute positioning, ",(0,n.jsx)(t.code,{children:"GameTestHelper#absolutePos"})," and ",(0,n.jsx)(t.code,{children:"GameTestHelper#relativePos"})," can be used respectively."]}),"\n",(0,n.jsxs)(t.p,{children:["The relative position of a structure template can be obtained in-game by loading the structure via the ",(0,n.jsx)(t.a,{href:"#running-game-tests",children:"test command"}),", placing the player at the wanted location, and finally running the ",(0,n.jsx)(t.code,{children:"/test pos"})," command. This will grab the coordinates of the player relative to the closest structure within 200 blocks of the player. The command will export the relative position as a copyable text component in the chat to be used as a final local variable."]}),"\n",(0,n.jsxs)(t.admonition,{type:"tip",children:[(0,n.jsxs)(t.p,{children:["The local variable generated by ",(0,n.jsx)(t.code,{children:"/test pos"})," can specify its reference name by appending it to the end of the command:"]}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-bash",children:"/test pos <var> # Exports 'final BlockPos <var> = new BlockPos(...);'\n"})}),(0,n.jsxs)(t.admonition,{type:"tip",children:[(0,n.jsx)(t.h4,{id:"successful-completion",children:"Successful Completion"}),(0,n.jsxs)(t.p,{children:["A Game Test method is responsible for one thing: marking the test was successful on a valid completion. If no success state was achieved before the timeout is reached (as defined by ",(0,n.jsx)(t.code,{children:"GameTest#timeoutTicks"}),"), then the test automatically fails."]}),(0,n.jsxs)(t.p,{children:["There are many abstracted methods within ",(0,n.jsx)(t.code,{children:"GameTestHelper"})," which can be used to define a successful state; however, four are extremely important to be aware of."]}),(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Method"}),(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"#succeed"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"The test is marked as successful."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"#succeedIf"})}),(0,n.jsxs)(t.td,{style:{textAlign:"left"},children:["The supplied ",(0,n.jsx)(t.code,{children:"Runnable"})," is tested immediately and succeeds if no ",(0,n.jsx)(t.code,{children:"GameTestAssertException"})," is thrown. If the test does not succeed on the immediate tick, then it is marked as a failure."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"#succeedWhen"})}),(0,n.jsxs)(t.td,{style:{textAlign:"left"},children:["The supplied ",(0,n.jsx)(t.code,{children:"Runnable"})," is tested every tick until timeout and succeeds if the check on one of the ticks does not throw a ",(0,n.jsx)(t.code,{children:"GameTestAssertException"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"#succeedOnTickWhen"})}),(0,n.jsxs)(t.td,{style:{textAlign:"left"},children:["The supplied ",(0,n.jsx)(t.code,{children:"Runnable"})," is tested on the specified tick and will succeed if no ",(0,n.jsx)(t.code,{children:"GameTestAssertException"})," is thrown. If the ",(0,n.jsx)(t.code,{children:"Runnable"})," succeeds on any other tick, then it is marked as a failure."]})]})]})]}),(0,n.jsx)(t.admonition,{type:"caution",children:(0,n.jsx)(t.p,{children:"Game Tests are executed every tick until the test is marked as a success. As such, methods which schedule success on a given tick must be careful to always fail on any previous tick."})})]})]}),"\n",(0,n.jsx)(t.h4,{id:"scheduling-actions",children:"Scheduling Actions"}),"\n",(0,n.jsx)(t.p,{children:"Not all actions will occur when a test begins. Actions can be scheduled to occur at specific times or intervals:"}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Method"}),(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"#runAtTickTime"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"The action is ran on the specified tick."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"#runAfterDelay"})}),(0,n.jsxs)(t.td,{style:{textAlign:"left"},children:["The action is ran ",(0,n.jsx)(t.code,{children:"x"})," ticks after the current tick."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"#onEachTick"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"The action is ran every tick."})]})]})]}),"\n",(0,n.jsx)(t.h4,{id:"assertions",children:"Assertions"}),"\n",(0,n.jsxs)(t.p,{children:["At any time during a Game Test, an assertion can be made to check if a given condition is true. There are numerous assertion methods within ",(0,n.jsx)(t.code,{children:"GameTestHelper"}),"; however, it simplifies to throwing a ",(0,n.jsx)(t.code,{children:"GameTestAssertException"})," whenever the appropriate state is not met."]}),"\n",(0,n.jsx)(t.h3,{id:"generated-test-methods",children:"Generated Test Methods"}),"\n",(0,n.jsxs)(t.p,{children:["If Game Test methods need to be generated dynamically, a test method generator can be created. These methods take in no parameters and return a collection of ",(0,n.jsx)(t.code,{children:"TestFunction"}),"s. For a test method generator to be recognized, it must have a ",(0,n.jsx)(t.code,{children:"@GameTestGenerator"})," annotation:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:"public class ExampleGameTests {\n  @GameTestGenerator\n  public static Collection<TestFunction> exampleTests() {\n    // Return a collection of TestFunctions\n  }\n}\n"})}),"\n",(0,n.jsx)(t.h4,{id:"testfunction",children:"TestFunction"}),"\n",(0,n.jsxs)(t.p,{children:["A ",(0,n.jsx)(t.code,{children:"TestFunction"})," is the boxed information held by the ",(0,n.jsx)(t.code,{children:"@GameTest"})," annotation and the method running the test."]}),"\n",(0,n.jsx)(t.admonition,{type:"tip",children:(0,n.jsxs)(t.p,{children:["Any methods annotated using ",(0,n.jsx)(t.code,{children:"@GameTest"})," are translated into a ",(0,n.jsx)(t.code,{children:"TestFunction"})," using ",(0,n.jsx)(t.code,{children:"GameTestRegistry#turnMethodIntoTestFunction"}),". That method can be used as a reference for creating ",(0,n.jsx)(t.code,{children:"TestFunction"}),"s without the use of the annotation."]})}),"\n",(0,n.jsx)(t.h3,{id:"batching",children:"Batching"}),"\n",(0,n.jsxs)(t.p,{children:["Game Tests can be executed in batches instead of registration order. A test can be added to a batch by having the same supplied ",(0,n.jsx)(t.code,{children:"GameTest#batch"})," string."]}),"\n",(0,n.jsxs)(t.p,{children:["On its own, batching does not provide anything useful. However, batching can be used to perform setup and teardown states on the current level the tests are running in. This is done by annotating a method with either ",(0,n.jsx)(t.code,{children:"@BeforeBatch"})," for setup or ",(0,n.jsx)(t.code,{children:"@AfterBatch"})," for takedown. The ",(0,n.jsx)(t.code,{children:"#batch"})," methods must match the string supplied to the game test."]}),"\n",(0,n.jsxs)(t.p,{children:["Batch methods are ",(0,n.jsx)(t.code,{children:"Consumer<ServerLevel>"})," references, meaning they take in a ",(0,n.jsx)(t.code,{children:"ServerLevel"})," and return nothing:"]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:'public class ExampleGameTests {\n  @BeforeBatch(batch = "firstBatch")\n  public static void beforeTest(ServerLevel level) {\n    // Perform setup\n  }\n\n  @GameTest(batch = "firstBatch")\n  public static void exampleTest2(GameTestHelper helper) {\n    // Do stuff\n  }\n}\n'})}),"\n",(0,n.jsx)(t.h2,{id:"registering-a-game-test",children:"Registering a Game Test"}),"\n",(0,n.jsxs)(t.p,{children:["A Game Test must be registered to be ran in-game. There are two methods of doing so: via the ",(0,n.jsx)(t.code,{children:"@GameTestHolder"})," annotation or ",(0,n.jsx)(t.code,{children:"RegisterGameTestsEvent"}),". Both registration methods still require the test methods to be annotated with either ",(0,n.jsx)(t.code,{children:"@GameTest"}),", ",(0,n.jsx)(t.code,{children:"@GameTestGenerator"}),", ",(0,n.jsx)(t.code,{children:"@BeforeBatch"}),", or ",(0,n.jsx)(t.code,{children:"@AfterBatch"}),"."]}),"\n",(0,n.jsx)(t.h3,{id:"gametestholder",children:"GameTestHolder"}),"\n",(0,n.jsxs)(t.p,{children:["The ",(0,n.jsx)(t.code,{children:"@GameTestHolder"})," annotation registers any test methods within the type (class, interface, enum, or record). ",(0,n.jsx)(t.code,{children:"@GameTestHolder"})," contains a single method which has multiple uses. In this instance, the supplied ",(0,n.jsx)(t.code,{children:"#value"})," must be the mod id of the mod; otherwise, the test will not run under default configurations."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:"@GameTestHolder(MODID)\npublic class ExampleGameTests {\n  // ...\n}\n"})}),"\n",(0,n.jsx)(t.h3,{id:"registergametestsevent",children:"RegisterGameTestsEvent"}),"\n",(0,n.jsxs)(t.p,{children:[(0,n.jsx)(t.code,{children:"RegisterGameTestsEvent"})," can also register either classes or methods using ",(0,n.jsx)(t.code,{children:"#register"}),". The event listener must be ",(0,n.jsx)(t.a,{href:"/Neoforge-Korean-Documentation/en/docs/1.20.4/concepts/events#registering-an-event-handler",children:"added"})," to the mod event bus. Test methods registered this way must supply their mod id to ",(0,n.jsx)(t.code,{children:"GameTest#templateNamespace"})," on every method annotated with ",(0,n.jsx)(t.code,{children:"@GameTest"}),"."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:"// In some class\npublic void registerTests(RegisterGameTestsEvent event) {\n  event.register(ExampleGameTests.class);\n}\n\n// In ExampleGameTests\n@GameTest(templateNamespace = MODID)\npublic static void exampleTest3(GameTestHelper helper) {\n  // Perform setup\n}\n"})}),"\n",(0,n.jsx)(t.admonition,{type:"note",children:(0,n.jsxs)(t.p,{children:["The value supplied to ",(0,n.jsx)(t.code,{children:"GameTestHolder#value"})," and ",(0,n.jsx)(t.code,{children:"GameTest#templateNamespace"})," can be different from the current mod id. The configuration within the ",(0,n.jsx)(t.a,{href:"#enabling-other-namespaces",children:"buildscript"})," would need to be changed."]})}),"\n",(0,n.jsx)(t.h2,{id:"structure-templates",children:"Structure Templates"}),"\n",(0,n.jsxs)(t.p,{children:["Game Tests are performed within scenes loaded by structures, or templates. All templates define the dimensions of the scene and the initial data (blocks and entities) that will be loaded. The template must be stored as an ",(0,n.jsx)(t.code,{children:".nbt"})," file within ",(0,n.jsx)(t.code,{children:"data/<namespace>/structures"}),"."]}),"\n",(0,n.jsx)(t.admonition,{type:"tip",children:(0,n.jsx)(t.p,{children:"A structure template can be created and saved using a structure block."})}),"\n",(0,n.jsx)(t.p,{children:"The location of the template is specified by a few factors:"}),"\n",(0,n.jsxs)(t.ul,{children:["\n",(0,n.jsx)(t.li,{children:"If the namespace of the template is specified."}),"\n",(0,n.jsx)(t.li,{children:"If the class should be prepended to the name of the template."}),"\n",(0,n.jsx)(t.li,{children:"If the name of the template is specified."}),"\n"]}),"\n",(0,n.jsxs)(t.p,{children:["The namespace of the template is determined by ",(0,n.jsx)(t.code,{children:"GameTest#templateNamespace"}),", then ",(0,n.jsx)(t.code,{children:"GameTestHolder#value"})," if not specified, then ",(0,n.jsx)(t.code,{children:"minecraft"})," if neither is specified."]}),"\n",(0,n.jsxs)(t.p,{children:["The simple class name is not prepended to the name of the template if the ",(0,n.jsx)(t.code,{children:"@PrefixGameTestTemplate"})," is applied to a class or method with the test annotations and set to ",(0,n.jsx)(t.code,{children:"false"}),". Otherwise, the simple class name is made lowercase and prepended and followed by a dot before the template name."]}),"\n",(0,n.jsxs)(t.p,{children:["The name of the template is determined by ",(0,n.jsx)(t.code,{children:"GameTest#template"}),". If not specified, then the lowercase name of the method is used instead."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-java",children:"// Modid for all structures will be MODID\n@GameTestHolder(MODID)\npublic class ExampleGameTests {\n\n  // Class name is prepended, template name is not specified\n  // Template Location at 'modid:examplegametests.exampletest'\n  @GameTest\n  public static void exampleTest(GameTestHelper helper) { /*...*/ }\n\n  // Class name is not prepended, template name is not specified\n  // Template Location at 'modid:exampletest2'\n  @PrefixGameTestTemplate(false)\n  @GameTest\n  public static void exampleTest2(GameTestHelper helper) { /*...*/ }\n\n  // Class name is prepended, template name is specified\n  // Template Location at 'modid:examplegametests.test_template'\n  @GameTest(template = \"test_template\")\n  public static void exampleTest3(GameTestHelper helper) { /*...*/ }\n\n  // Class name is not prepended, template name is specified\n  // Template Location at 'modid:test_template2'\n  @PrefixGameTestTemplate(false)\n  @GameTest(template = \"test_template2\")\n  public static void exampleTest4(GameTestHelper helper) { /*...*/ }\n}\n"})}),"\n",(0,n.jsx)(t.h2,{id:"running-game-tests",children:"Running Game Tests"}),"\n",(0,n.jsxs)(t.p,{children:["Game Tests can be run using the ",(0,n.jsx)(t.code,{children:"/test"})," command. The ",(0,n.jsx)(t.code,{children:"test"})," command is highly configurable; however, only a few are of importance to running tests:"]}),"\n",(0,n.jsxs)(t.table,{children:[(0,n.jsx)(t.thead,{children:(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.th,{style:{textAlign:"center"},children:"Subcommand"}),(0,n.jsx)(t.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,n.jsxs)(t.tbody,{children:[(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"run"})}),(0,n.jsxs)(t.td,{style:{textAlign:"left"},children:["Runs the specified test: ",(0,n.jsx)(t.code,{children:"run <test_name>"}),"."]})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"runall"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Runs all available tests."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"runthis"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Runs the nearest test to the player within 15 blocks."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"runthese"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Runs tests within 200 blocks of the player."})]}),(0,n.jsxs)(t.tr,{children:[(0,n.jsx)(t.td,{style:{textAlign:"center"},children:(0,n.jsx)(t.code,{children:"runfailed"})}),(0,n.jsx)(t.td,{style:{textAlign:"left"},children:"Runs all tests that failed in the previous run."})]})]})]}),"\n",(0,n.jsx)(t.admonition,{type:"note",children:(0,n.jsxs)(t.p,{children:["Subcommands follow the test command: ",(0,n.jsx)(t.code,{children:"/test <subcommand>"}),"."]})}),"\n",(0,n.jsx)(t.h2,{id:"buildscript-configurations",children:"Buildscript Configurations"}),"\n",(0,n.jsxs)(t.p,{children:["Game Tests provide additional configuration settings within a buildscript (the ",(0,n.jsx)(t.code,{children:"build.gradle"})," file) to run and integrate into different settings."]}),"\n",(0,n.jsx)(t.h3,{id:"enabling-other-namespaces",children:"Enabling Other Namespaces"}),"\n",(0,n.jsxs)(t.p,{children:["If the buildscript was ",(0,n.jsx)(t.a,{href:"/Neoforge-Korean-Documentation/en/docs/1.20.4/gettingstarted/#simple-buildgradle-customizations",children:"setup as recommended"}),", then only Game Tests under the current mod id would be enabled. To enable other namespaces to load Game Tests from, a run configuration must set the property ",(0,n.jsx)(t.code,{children:"forge.enabledGameTestNamespaces"})," to a string specifying each namespace separated by a comma. If the property is empty or not set, then all namespaces will be loaded."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-gradle",children:"// Inside a run configuration\nproperty 'forge.enabledGameTestNamespaces', 'modid1,modid2,modid3'\n"})}),"\n",(0,n.jsx)(t.admonition,{type:"caution",children:(0,n.jsx)(t.p,{children:"There must be no spaces in-between namespaces; otherwise, the namespace will not be loaded correctly."})}),"\n",(0,n.jsx)(t.h3,{id:"game-test-server-run-configuration",children:"Game Test Server Run Configuration"}),"\n",(0,n.jsxs)(t.p,{children:["The Game Test Server is a special configuration which runs a build server. The build server returns an exit code of the number of required, failed Game Tests. All failed tests, whether required or optional, are logged. This server can be run using ",(0,n.jsx)(t.code,{children:"gradlew runGameTestServer"}),"."]}),"\n",(0,n.jsxs)(s,{children:[(0,n.jsx)("summary",{children:"Important infromation on FG5"}),(0,n.jsxs)(t.admonition,{type:"caution",children:[(0,n.jsx)(t.p,{children:"Due to a quirk in how Gradle works, by default, if a task forces a system exit, the Gradle daemon will be killed, causing the Gradle runner to report a build failure. ForgeGradle sets by default a force exit on run tasks such that any subprojects are not executed in sequence. However, as such, the Game Test Server will always fail."}),(0,n.jsxs)(t.p,{children:["This can be fixed by disabling the force exit on the run configuration using the ",(0,n.jsx)(t.code,{children:"#setForceExit"})," method:"]}),(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-gradle",children:"// Game Test Server run configuration\ngameTestServer {\n    // ...\n    setForceExit false\n}\n"})})]})]}),"\n",(0,n.jsx)(t.h3,{id:"enabling-game-tests-in-other-run-configurations",children:"Enabling Game Tests in Other Run Configurations"}),"\n",(0,n.jsxs)(t.p,{children:["By default, only the ",(0,n.jsx)(t.code,{children:"client"}),", ",(0,n.jsx)(t.code,{children:"server"}),", and ",(0,n.jsx)(t.code,{children:"gameTestServer"})," run configurations have Game Tests enabled. If another run configuration should run Game Tests, then the ",(0,n.jsx)(t.code,{children:"forge.enableGameTest"})," property must be set to ",(0,n.jsx)(t.code,{children:"true"}),"."]}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-gradle",children:"// Inside a run configuration\nproperty 'forge.enableGameTest', 'true'\n"})})]})}function h(e={}){const{wrapper:t}={...(0,i.a)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},1151:(e,t,s)=>{s.d(t,{Z:()=>l,a:()=>r});var n=s(7294);const i={},a=n.createContext(i);function r(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);