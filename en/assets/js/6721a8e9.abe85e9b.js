"use strict";(self.webpackChunkneoforged_docs=self.webpackChunkneoforged_docs||[]).push([[6913],{3599:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>r,metadata:()=>d,toc:()=>c});var t=o(5893),a=o(1151);const r={},i="Global Loot Modifier Generation",d={id:"datagen/glm",title:"Global Loot Modifier Generation",description:"Global Loot Modifiers (GLMs) can be generated for a mod by subclassing GlobalLootModifierProvider and implementing #start. Each GLM can be added generated by calling #add and specifying the name of the modifier and the modifier instance to be serialized. After implementation, the provider must be added to the DataGenerator.",source:"@site/versioned_docs/version-1.20.4/datagen/glm.md",sourceDirName:"datagen",slug:"/datagen/glm",permalink:"/Neoforge-Korean-Documentation/en/docs/1.20.4/datagen/glm",draft:!1,unlisted:!1,tags:[],version:"1.20.4",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Advancement Generation",permalink:"/Neoforge-Korean-Documentation/en/docs/1.20.4/datagen/advancements"},next:{title:"Loot Table Generation",permalink:"/Neoforge-Korean-Documentation/en/docs/1.20.4/datagen/loottables"}},s={},c=[];function l(e){const n={a:"a",code:"code",h1:"h1",p:"p",pre:"pre",...(0,a.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"global-loot-modifier-generation",children:"Global Loot Modifier Generation"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"/Neoforge-Korean-Documentation/en/docs/1.20.4/resources/server/glm",children:"Global Loot Modifiers (GLMs)"})," can be generated for a mod by subclassing ",(0,t.jsx)(n.code,{children:"GlobalLootModifierProvider"})," and implementing ",(0,t.jsx)(n.code,{children:"#start"}),". Each GLM can be added generated by calling ",(0,t.jsx)(n.code,{children:"#add"})," and specifying the name of the modifier and the ",(0,t.jsx)(n.a,{href:"/Neoforge-Korean-Documentation/en/docs/1.20.4/resources/server/glm#igloballootmodifier",children:"modifier instance"})," to be serialized. After implementation, the provider must be ",(0,t.jsx)(n.a,{href:"/Neoforge-Korean-Documentation/en/docs/1.20.4/resources/#data-generation",children:"added"})," to the ",(0,t.jsx)(n.code,{children:"DataGenerator"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// On the MOD event bus\n@SubscribeEvent\npublic void gatherData(GatherDataEvent event) {\n    event.getGenerator().addProvider(\n        // Tell generator to run only when server data are generating\n        event.includeServer(),\n        output -> new MyGlobalLootModifierProvider(output, MOD_ID)\n    );\n}\n\n// In some GlobalLootModifierProvider#start\nthis.add("example_modifier", new ExampleModifier(\n  new LootItemCondition[] {\n    WeatherCheck.weather().setRaining(true).build() // Executes when raining\n  },\n  "val1",\n  10,\n  Items.DIRT\n));\n'})})]})}function m(e={}){const{wrapper:n}={...(0,a.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},1151:(e,n,o)=>{o.d(n,{Z:()=>d,a:()=>i});var t=o(7294);const a={},r=t.createContext(a);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);