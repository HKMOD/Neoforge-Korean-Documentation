"use strict";(self.webpackChunkneoforged_docs=self.webpackChunkneoforged_docs||[]).push([[4739],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>u});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var d=r.createContext({}),c=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(d.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,d=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=c(n),f=o,u=p["".concat(d,".").concat(f)]||p[f]||m[f]||a;return n?r.createElement(u,i(i({ref:t},s),{},{components:n})):r.createElement(u,i({ref:t},s))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=f;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},9274:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const a={},i="Global Loot Modifier Generation",l={unversionedId:"datagen/server/glm",id:"datagen/server/glm",title:"Global Loot Modifier Generation",description:"Global Loot Modifiers (GLMs) can be generated for a mod by subclassing GlobalLootModifierProvider and implementing #start. Each GLM can be added generated by calling #add and specifying the name of the modifier and the modifier instance to be serialized. After implementation, the provider must be added to the DataGenerator.",source:"@site/docs/datagen/server/glm.md",sourceDirName:"datagen/server",slug:"/datagen/server/glm",permalink:"/Neoforge-Korean-Documentation/en/docs/datagen/server/glm",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Datapack Registry Object Generation",permalink:"/Neoforge-Korean-Documentation/en/docs/datagen/server/datapackregistries"},next:{title:"Loot Table Generation",permalink:"/Neoforge-Korean-Documentation/en/docs/datagen/server/loottables"}},d={},c=[],s={toc:c},p="wrapper";function m(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"global-loot-modifier-generation"},"Global Loot Modifier Generation"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/Neoforge-Korean-Documentation/en/docs/resources/server/glm"},"Global Loot Modifiers (GLMs)")," can be generated for a mod by subclassing ",(0,o.kt)("inlineCode",{parentName:"p"},"GlobalLootModifierProvider")," and implementing ",(0,o.kt)("inlineCode",{parentName:"p"},"#start"),". Each GLM can be added generated by calling ",(0,o.kt)("inlineCode",{parentName:"p"},"#add")," and specifying the name of the modifier and the ",(0,o.kt)("a",{parentName:"p",href:"/Neoforge-Korean-Documentation/en/docs/resources/server/glm#igloballootmodifier"},"modifier instance")," to be serialized. After implementation, the provider must be ",(0,o.kt)("a",{parentName:"p",href:"/Neoforge-Korean-Documentation/en/docs/datagen/#data-providers"},"added")," to the ",(0,o.kt)("inlineCode",{parentName:"p"},"DataGenerator"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'// On the MOD event bus\n@SubscribeEvent\npublic void gatherData(GatherDataEvent event) {\n    event.getGenerator().addProvider(\n        // Tell generator to run only when server data are generating\n        event.includeServer(),\n        output -> new MyGlobalLootModifierProvider(output, MOD_ID)\n    );\n}\n\n// In some GlobalLootModifierProvider#start\nthis.add("example_modifier", new ExampleModifier(\n  new LootItemCondition[] {\n    WeatherCheck.weather().setRaining(true).build() // Executes when raining\n  },\n  "val1",\n  10,\n  Items.DIRT\n));\n')))}m.isMDXComponent=!0}}]);