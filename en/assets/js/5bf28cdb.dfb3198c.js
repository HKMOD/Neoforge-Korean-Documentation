"use strict";(self.webpackChunkneoforged_docs=self.webpackChunkneoforged_docs||[]).push([[9948],{9792:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>s,default:()=>h,frontMatter:()=>a,metadata:()=>c,toc:()=>d});var i=t(5893),r=t(1151);const a={},s="Recipes",c={id:"resources/server/recipes/index",title:"Recipes",description:"Recipes are a way to transform some number of objects into other objects within a Minecraft world. Although the vanilla system deals purely with item transformations, the system as a whole can be expanded to use any object the programmer creates.",source:"@site/versioned_docs/version-1.20.4/resources/server/recipes/index.md",sourceDirName:"resources/server/recipes",slug:"/resources/server/recipes/",permalink:"/Neoforge-Korean-Documentation/en/docs/1.20.4/resources/server/recipes/",draft:!1,unlisted:!1,tags:[],version:"1.20.4",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Loot Tables",permalink:"/Neoforge-Korean-Documentation/en/docs/1.20.4/resources/server/loottables"},next:{title:"Custom Recipes",permalink:"/Neoforge-Korean-Documentation/en/docs/1.20.4/resources/server/recipes/custom"}},o={},d=[{value:"Data-Driven Recipes",id:"data-driven-recipes",level:2},{value:"Recipe Manager",id:"recipe-manager",level:2},{value:"Additional Features",id:"additional-features",level:2},{value:"Recipe ItemStack Result",id:"recipe-itemstack-result",level:3},{value:"Conditional Recipes",id:"conditional-recipes",level:3},{value:"Larger Crafting Grids",id:"larger-crafting-grids",level:3},{value:"Ingredient Types",id:"ingredient-types",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"recipes",children:"Recipes"}),"\n",(0,i.jsx)(n.p,{children:"Recipes are a way to transform some number of objects into other objects within a Minecraft world. Although the vanilla system deals purely with item transformations, the system as a whole can be expanded to use any object the programmer creates."}),"\n",(0,i.jsx)(n.h2,{id:"data-driven-recipes",children:"Data-Driven Recipes"}),"\n",(0,i.jsxs)(n.p,{children:["Most recipe implementations within vanilla are data driven via JSON. This means that a mod is not necessary to create a new recipe, only a ",(0,i.jsx)(n.a,{href:"https://minecraft.wiki/w/Data_pack",children:"Data pack"}),". A full list on how to create and put these recipes within the mod's ",(0,i.jsx)(n.code,{children:"resources"})," folder can be found on the ",(0,i.jsx)(n.a,{href:"https://minecraft.wiki/w/Recipe",children:"Minecraft Wiki"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["A recipe can be obtained within the Recipe Book as a reward for completing an ",(0,i.jsx)(n.a,{href:"/Neoforge-Korean-Documentation/en/docs/1.20.4/resources/server/advancements",children:"advancement"}),". Recipe advancements always have ",(0,i.jsx)(n.code,{children:"minecraft:recipes/root"})," as their parent, to not to appear on the advancement screen. The default criteria to gain the recipe advancement is a check if the user has unlocked the recipe from using it once or receiving it through a command like ",(0,i.jsx)(n.code,{children:"/recipe"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// Within some recipe advancement json\n"has_the_recipe": { // Criteria label\n  // Succeeds if examplemod:example_recipe is used\n  "trigger": "minecraft:recipe_unlocked",\n  "conditions": {\n    "recipe": "examplemod:example_recipe"\n  }\n}\n//...\n"requirements": [\n  [\n    "has_the_recipe"\n    // ... Other criteria labels to be ORed against to unlock recipe\n  ]\n]\n'})}),"\n",(0,i.jsxs)(n.p,{children:["Data-driven recipes and their unlocking advancement can be ",(0,i.jsx)(n.a,{href:"/Neoforge-Korean-Documentation/en/docs/1.20.4/datagen/recipes",children:"generated"})," via ",(0,i.jsx)(n.code,{children:"RecipeProvider"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"recipe-manager",children:"Recipe Manager"}),"\n",(0,i.jsxs)(n.p,{children:["Recipes are loaded and stored via the ",(0,i.jsx)(n.code,{children:"RecipeManager"}),". Any operations relating to getting available recipe(s) are handled by this manager. There are two important methods to know of:"]}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"center"},children:"Method"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"getRecipeFor"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Gets the first recipe that matches the current input."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"center"},children:(0,i.jsx)(n.code,{children:"getRecipesFor"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Gets all recipes that match the current input."})]})]})]}),"\n",(0,i.jsxs)(n.p,{children:["Each method takes in a ",(0,i.jsx)(n.code,{children:"RecipeType"}),", which denotes what method is being applied to use the recipe (crafting, smelting, etc.), a ",(0,i.jsx)(n.code,{children:"Container"})," which holds the configuration of the inputs, and the current level which is passed to ",(0,i.jsx)(n.code,{children:"Recipe#matches"})," along with the container."]}),"\n",(0,i.jsxs)(n.admonition,{type:"tip",children:[(0,i.jsxs)(n.p,{children:["NeoForge provides the ",(0,i.jsx)(n.code,{children:"RecipeWrapper"})," utility class which extends ",(0,i.jsx)(n.code,{children:"Container"})," for wrapping around ",(0,i.jsx)(n.code,{children:"IItemHandler"}),"s and passing them to methods which requires a ",(0,i.jsx)(n.code,{children:"Container"})," parameter."]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-java",children:"// Within some method with IItemHandlerModifiable handler\nrecipeManger.getRecipeFor(RecipeType.CRAFTING, new RecipeWrapper(handler), level);\n"})})]}),"\n",(0,i.jsx)(n.h2,{id:"additional-features",children:"Additional Features"}),"\n",(0,i.jsx)(n.p,{children:"NeoForge provides some additional behavior to the recipe schema and its implementations for greater control of the system."}),"\n",(0,i.jsx)(n.h3,{id:"recipe-itemstack-result",children:"Recipe ItemStack Result"}),"\n",(0,i.jsxs)(n.p,{children:["Except for ",(0,i.jsx)(n.code,{children:"minecraft:stonecutting"})," recipes, all vanilla recipe serializers expand the ",(0,i.jsx)(n.code,{children:"result"})," tag to take in a full ",(0,i.jsx)(n.code,{children:"ItemStack"})," as a ",(0,i.jsx)(n.code,{children:"JsonObject"})," instead of just the item name and amount in some cases."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-js",children:'// In some recipe JSON\n"result": {\n  // The name of the registry item to give as a result\n  "item": "examplemod:example_item",\n  // The number of items to return\n  "count": 4,\n  // The tag data of the stack, can also be a string\n  "nbt": {\n      // Add tag data here\n  }\n}\n'})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"nbt"})," tag can alternatively be a string containing a stringified NBT (or SNBT) for data which cannot be properly represented as a JSON object (such as ",(0,i.jsx)(n.code,{children:"IntArrayTag"}),"s)."]})}),"\n",(0,i.jsx)(n.h3,{id:"conditional-recipes",children:"Conditional Recipes"}),"\n",(0,i.jsxs)(n.p,{children:["Recipes and their unlocking advancement can be ",(0,i.jsx)(n.a,{href:"/Neoforge-Korean-Documentation/en/docs/1.20.4/resources/server/conditional#implementations",children:"loaded conditionally and defaulted"})," depending on what information is present (mod loaded, item exists, etc.)."]}),"\n",(0,i.jsx)(n.h3,{id:"larger-crafting-grids",children:"Larger Crafting Grids"}),"\n",(0,i.jsxs)(n.p,{children:["By default, vanilla declares a maximum width and height for a crafting grid to be a 3x3 square. This can be expanded by calling ",(0,i.jsx)(n.code,{children:"ShapedRecipe#setCraftingSize"})," with the new width and height in ",(0,i.jsx)(n.code,{children:"FMLCommonSetupEvent"}),"."]}),"\n",(0,i.jsx)(n.admonition,{type:"caution",children:(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"ShapedRecipe#setCraftingSize"})," is ",(0,i.jsx)(n.strong,{children:"NOT"})," thread-safe. As such, it should be enqueued to the synchronous work queue via ",(0,i.jsx)(n.code,{children:"FMLCommonSetupEvent#enqueueWork"}),"."]})}),"\n",(0,i.jsxs)(n.p,{children:["Larger crafting grids in recipes can be ",(0,i.jsx)(n.a,{href:"/Neoforge-Korean-Documentation/en/docs/1.20.4/datagen/recipes",children:"data generated"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"ingredient-types",children:"Ingredient Types"}),"\n",(0,i.jsxs)(n.p,{children:["A few additional ",(0,i.jsx)(n.a,{href:"/Neoforge-Korean-Documentation/en/docs/1.20.4/resources/server/recipes/ingredients#neoforge-types",children:"ingredient types"})," are added to allow recipes to have inputs which check tag data or combine multiple ingredients into a single input checker."]})]})}function h(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>s});var i=t(7294);const r={},a=i.createContext(r);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);