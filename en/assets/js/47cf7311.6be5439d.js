"use strict";(self.webpackChunkneoforged_docs=self.webpackChunkneoforged_docs||[]).push([[1629],{3515:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>d,default:()=>p,frontMatter:()=>r,metadata:()=>c,toc:()=>s});var i=o(5893),t=o(1151);const r={sidebar_position:1},d="Non-Minecraft dependencies",c={id:"docs/dependencies/nonmclibs",title:"Non-Minecraft dependencies",description:"Non-Minecraft dependencies are not loaded by NeoForge by default in the development environment. To get NeoForge to recognize the non-Minecraft dependency, they must be added to runs as a runtime dependency.",source:"@site/neogradle/docs/dependencies/nonmclibs.md",sourceDirName:"docs/dependencies",slug:"/docs/dependencies/nonmclibs",permalink:"/Neoforge-Korean-Documentation/en/neogradle/docs/dependencies/nonmclibs",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"ngSidebar",previous:{title:"Dependencies",permalink:"/Neoforge-Korean-Documentation/en/neogradle/docs/dependencies/"},next:{title:"Jar-in-Jar",permalink:"/Neoforge-Korean-Documentation/en/neogradle/docs/dependencies/jarinjar"}},a={},s=[];function l(e){const n={admonition:"admonition",code:"code",h1:"h1",p:"p",pre:"pre",...(0,t.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"non-minecraft-dependencies",children:"Non-Minecraft dependencies"}),"\n",(0,i.jsx)(n.p,{children:"Non-Minecraft dependencies are not loaded by NeoForge by default in the development environment. To get NeoForge to recognize the non-Minecraft dependency, they must be added to runs as a runtime dependency."}),"\n",(0,i.jsxs)(n.p,{children:["For example, you can add the ",(0,i.jsx)(n.code,{children:"com.example:example"})," library to all runs like so:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-gradle",children:"dependencies {\n    implementation 'com.example:example:1.0'\n}\n\nruns {\n    configureEach {\n        dependencies {\n            // highlight-next-line\n            runtime 'com.example:example:1.0'\n        }\n    }\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Or, you can use a configuration:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-gradle",children:"configurations {\n    libraries\n    // This will make sure that all dependencies that you add to the libraries configuration will also be added to the implementation configuration\n    // This way, you only need one dependency declaration for both runtime and compile dependencies\n    implementation.extendsFrom libraries\n}\n\ndependencies {\n    libraries 'com.example:example:1.0'\n}\n\nruns {\n    configureEach {\n        dependencies {\n            // highlight-next-line\n            runtime project.configurations.libraries\n        }\n    }\n}\n"})}),"\n",(0,i.jsxs)(n.admonition,{type:"tip",children:[(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"configureEach"})," will configure each run. If you instead only want to add a runtime dependency to one specific run you can use ",(0,i.jsx)(n.code,{children:"named(<name>).configure"}),":"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-gradle",children:"runs {\n    // Only configure dependencies for the client run\n    // highlight-next-line\n    named('client').configure {\n        dependencies {\n\n        }\n    }\n}\n"})})]})]})}function p(e={}){const{wrapper:n}={...(0,t.a)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},1151:(e,n,o)=>{o.d(n,{Z:()=>c,a:()=>d});var i=o(7294);const t={},r=i.createContext(t);function d(e){const n=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:d(e.components),i.createElement(r.Provider,{value:n},e.children)}}}]);